This file follows the Doxygen syntax to be included in the
documentation, but it should remain readable directly.

/** 
 @defgroup MSG_examples MSG examples
 @ingroup MSG_API
 @brief Find the MSG example fitting your needs from the extensive set provided in the archive.

  - @ref msg_ex_basic
  - @ref msg_ex_async
  - @ref msg_ex_process
  - @ref msg_ex_tracing
  - @ref msg_ex_tracing_user_variables
  - @ref msg_ex_models
  - @ref msg_ex_io
  - @ref msg_ex_actions
  - @ref msg_ex_full_apps
  - @ref msg_ex_misc
		    
@section msg_ex_basic Basic examples and features

 - <b>Ping Pong</b>: @ref examples/msg/app-pingpong/app-pingpong.c\n
   It's hard to think of a simpler example: it is just sending one
   message back and forth.  
   The tesh file laying in the directory show how to start the
   simulator binary, enlighting how to pass options to the simulators
   (as detailed in Section \ref options). 

 - <b>Token Ring</b>.
   @ref examples/msg/app-token-ring/app-token-ring.c\n
   Classical communication pattern, where a token is exchanged
   along a ring to reach every participant. 
   The tesh file laying in the directory shows how to run the same
   example on different virtual platforms.

 - <b>Master Workers</b>.
   @ref examples/msg/app-masterworker/app-masterworker.c\n
   Another good old example, where one Master process has a bunch of
   task to dispatch to a set of several Worker processes. It is fully
   commented in @ref MSG_ex_master_worker.

@section msg_ex_async Asynchronous communications

In addition to the fully documented example of @ref
MSG_ex_asynchronous_communications, there are several other examples
shipped in the archive:
  
 - <b>Basic asynchronous communications</b>. 
   @ref examples/msg/async-wait/async-wait.c \n
   Illustrates how to have non-blocking communications, that are
   communications running in the background leaving the process free
   to do something else during their completion. The main functions
   involved are @ref MSG_task_isend, @ref MSG_task_irecv, and @ref
   MSG_comm_wait.
 
 - <b>Waiting for all communications in a set</b>.
   @ref examples/msg/async-waitall/async-waitall.c\n
   The @ref MSG_comm_waitall function is useful when you want to block
   until all activities in a given set have completed.
   
 - <b>Waiting for the first completed communication in a set</b>.
   @ref examples/msg/async-waitall/async-waitany.c\n
   The @ref MSG_comm_waitany function is useful when you want to block
   until one activity of the set completes, no matter which terminates
   first.

@section msg_ex_process Acting on Processes

  - <b>Suspend and Resume processes</b>.
    @ref examples/msg/process-suspend/process-suspend.c \n
    Processes can be suspended and resumed during their executions
    thanks to the @ref MSG_process_suspend and @ref MSG_process_resume functions.

  - <b>Kill processes</b>.
    @ref examples/msg/process-kill/process-kill.c \n
    Processes can forcefully stop other processes with the @ref MSG_process_kill function.
     
  - <b>Migrating processes</b>.
    @ref examples/msg/process-migration/process-migration.c \n
    Processes can move or be moved from a host to another with the @ref MSG_process_migrate function.
    
  - <b>Controling the process life cycle from the XML</b>.
    @ref examples/msg/process-startkilltime/process-startkilltime.c \n
    You can specify a start time and a kill time in the deployment
    file. See all *_d.xml files in this directory.

@section msg_ex_tracing Tracing and visualization features

Tracing can be activated by various configuration options which
are illustrated in these example. See also the 
@ref tracing_tracing_options "full list of options related to tracing".

  - <b>Basic example</b>. @ref examples/msg/trace-simple/trace-simple.c \n
    In this very simple program, each process creates, executes,
    and destroy a task. You might want to run it with the
    <i>--cfg=tracing/uncategorized:yes</i> option.

  - <b>Platform tracing</b>.
    @ref examples/msg/trace-platform/trace-platform.c \n
    This program is a toy example just loading the platform, so that
    you can play with the  <i>--cfg=tracing:yes</i> and
    <i>--cfg=tracing/categorized:yes</i> options and visualize the
    result.

  - <b>Setting Categories</b>.
    @ref examples/msg/trace-categories/trace-categories.c \n
    This example declares several tracing categories
    to that are used to classify its tasks. When the program is executed,
    the tracing mechanism registers the resource utilization of hosts
    and links according to these categories.\n
    You want to run this program with the following options:
    <i>--cfg=tracing:yes</i>, <i>--cfg=tracing/categorized:yes</i>,
    <i>--cfg=tracing/uncategorized:yes</i>, <i>--cfg=viva/categorized:viva_cat.plist</i>, and
    <i>--cfg=viva/uncategorized:viva_uncat.plist</i>.

    
    
@example examples/msg/trace-masterworker/trace-masterworker.c
@example examples/msg/trace-process-migration/trace-process-migration.c
@example examples/msg/trace-user-variables/trace-user-variables.c
@example examples/msg/trace-link-user-variables/trace-link-user-variables.c
@example examples/msg/trace-link-srcdst-user-variables/trace-link-srcdst-user-variables.c
@example examples/msg/network-ns3/network-ns3.c
@example examples/msg/io-storage/io-storage.c
@example examples/msg/io-file/io-file.c
@example examples/msg/io-remote/io-remote.c
@example examples/msg/actions-comm/actions-comm.c
@example examples/msg/actions-storage/actions-storage.c
@example examples/msg/app-pmm/app-pmm.c
@example examples/msg/dht-chord
@example examples/msg/task-priority/task-priority.c
@example examples/msg/properties/properties.c

*/

As a human, you can stop reading at this point. The rest is garbage:

Every example must be listed in the following, but it's not possible
to move this content upper as each @example directive seems to eat the
next doxygen commands (and the content is placed at the top of the
example file). 


/**
@defgroup MSG_ex_examples ignored
@example examples/msg/app-pingpong/app-pingpong.c        
@example examples/msg/app-token-ring/app-token-ring.c    
@example examples/msg/app-masterworker/app-masterworker.c

@example examples/msg/async-wait/async-wait.c
@example examples/msg/async-waitall/async-waitall.c
@example examples/msg/async-waitall/async-waitany.c

@example examples/msg/process-suspend/process-suspend.c
@example examples/msg/process-kill/process-kill.c
@example examples/msg/process-migration/process-migration.c
@example examples/msg/process-startkilltime/process-startkilltime.c

@example examples/msg/trace-simple/trace-simple.c
@example examples/msg/trace-platform/trace-platform.c
@example examples/msg/trace-categories/trace-categories.c
@example examples/msg/trace-masterworker/trace-masterworker.c
@example examples/msg/trace-process-migration/trace-process-migration.c
@example examples/msg/trace-user-variables/trace-user-variables.c
@example examples/msg/trace-link-user-variables/trace-link-user-variables.c
@example examples/msg/trace-link-srcdst-user-variables/trace-link-srcdst-user-variables.c

@example examples/msg/network-ns3/network-ns3.c
@example examples/msg/io-storage/io-storage.c
@example examples/msg/io-file/io-file.c
@example examples/msg/io-remote/io-remote.c
@example examples/msg/actions-comm/actions-comm.c
@example examples/msg/actions-storage/actions-storage.c
@example examples/msg/app-pmm/app-pmm.c
@example examples/msg/dht-chord
@example examples/msg/task-priority/task-priority.c
@example examples/msg/properties/properties.c
			 
*/

Basic examples and features
===========================

 * migration/migration.c Demonstrates how to use the
   MSG_process_migrate() function to let processes change the host
   they run on after their start.

 * suspend/suspend.c: Demonstrates how to suspend and resume processes
   using MSG_process_suspend() and MSG_process_resume().

 * properties/msg_prop.c Attaching arbitrary information to host,
   processes and such, and retrieving them with
   MSG_host_get_properties(), MSG_host_get_property_value(),
   MSG_process_get_properties() and MSG_process_get_property_value().
   Also make sure to read the platform and deployment XML files to see
   how to declare these data.

 * parallel_task/parallel_task.c: Demonstrates the use of
   MSG_parallel_task_create(), to create special tasks that run on
   several hosts at the same time. The resulting simulations are very
   close to what can be achieved in SimDag, but still allows to use
   the other features of MSG (it'd be cool to be able to mix
   interfaces, but it's not possible ATM).

 * priority/priority.c: Demonstrates the use of
   MSG_task_set_priority() to change the computation priority of a
   given task.

Tracing and visualization features
==================================
 * tracing/simple.c very simple program that creates, executes and
   destroy a task
 * tracing/ms.c TODO
 * tracing/categories.c example with the declaration of multiple
   categories
 * tracing/procmig.c example to trace process migration using the mask
   TRACE_PROCESS
 * tracing/trace_platform.c: Demonstrates how to trace the platform
 * tracing/user_variables.c: Demonstrates how to trace user-provided
   variables

Models-related examples
=======================

Packet level simulators
-----------------------
These examples demonstrate how to use the bindings to classical
Packet-Level Simulators (PLS), as explained in the relevant part of
the web documentation. The most interesting is probably not the C
files since they are unchanged from the other simulations, but the
associated files, such as the platform files to see how to declare a
platform to be used with the PLS bindings of SimGrid and the tesh
files to see how to actually start a simulation in these settings.
   
 * ns3: Simple ping-pong using ns3 instead of the SimGrid models
 * gtnets Simple ping-pong using GTNeTs instead of the SimGrid models

Other resource kinds
--------------------
This section contains some sparse examples of how to use the other
kind of resources, such as disk. These resources are quite
experimental for now, but here we go anyway. 

 * io/file.c Example with the disk resource

Trace driven simulations
========================

The actions/actions.c example demonstrates how to run trace-driven
simulations. It is very handy when you want to test an algorithm or
protocol that does nothing unless it receives some events from
outside. For example, a P2P protocol reacts to requests from the user,
but does nothing if there is no such event.

In such situations, SimGrid allows to write your protocol in your C
file, and the events to react to in a separate text file. Declare a
function handling each of the events that you want to accept in your
trace files, register them using MSG_action_register in your main, and
then use MSG_action_trace_run to launch the simulation. You can either
have one trace file containing all your events, or a file per
simulated process. Check the tesh files in the example directory for
details on how to do it.

This example uses this approach to replay MPI-like traces. It comes
with a set of event handlers reproducing MPI events. This is somehow
similar to SMPI, yet differently implemented. This code should
probably be changed to use SMPI internals instead, but wasn't, so far.

Examples of full applications
=============================

 * chord/chord.c: Classical Chord P2P protocol This example implements
   the well known Chord P2P protocol. Its main advantage is that it
   constitute a fully working non-trivial example. In addition, its
   implementation is rather efficient, as demonstrated in
   [57]http://hal.inria.fr/inria-00602216/


