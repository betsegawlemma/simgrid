
$ ./host_on_off_processes ${srcdir:=.}/../../../examples/platforms/small_platform.xml ${srcdir:=.}/host_on_off_processes_d.xml 1 --log=no_loc --log=msg.thresh:error --log=surf_maxmin.thresh:error
> [Tremblay:test:(1) 0.000000] [msg_test/INFO] Test 1:
> [Tremblay:test:(1) 0.000000] [msg_test/INFO]   Create a process on Jupiter
> [Jupiter:daemon:(2) 0.000000] [msg_test/INFO]   Execute deamon
> [Tremblay:test:(1) 0.000000] [msg_test/INFO]   Turn off Jupiter
> [Tremblay:test:(1) 10.000000] [msg_test/INFO] Test 1 seems ok, cool !(number of Process : 1, it should be 1 (i.e. the Test one))
> [10.000000] [msg_test/INFO] Simulation time 10

$ ./host_on_off_processes ${srcdir:=.}/../../../examples/platforms/small_platform.xml ${srcdir:=.}/host_on_off_processes_d.xml 2 --log=no_loc --log=msg.thresh:error --log=surf_maxmin.thresh:error
> [Tremblay:test:(1) 0.000000] [msg_test/INFO] Test 2:
> [Tremblay:test:(1) 0.000000] [msg_test/INFO]   Turn off Jupiter
> [0.000000] [simix_process/WARNING] Cannot launch process 'daemon' on failed host 'Jupiter'
> [Tremblay:test:(1) 10.000000] [msg_test/INFO]   Test 2 does not crash, WTF ?!(number of Process : 1, it should be 1)
> [Tremblay:test:(1) 10.000000] [msg_test/INFO]   Ok so let's turn on/off the node to see whether the process is correctly bound to Jupiter
> [Tremblay:test:(1) 10.000000] [msg_test/INFO]   Turn off
> [Tremblay:test:(1) 10.000000] [msg_test/INFO]   sleep
> [Tremblay:test:(1) 20.000000] [msg_test/INFO] number of Process : 1 it should be 1. The daemon that has been created for test2 has been correctly destroyed....ok at least it looks rigorous, cool ! You just have to disallow the possibility to create a new process on a node when the node is off.)
> [20.000000] [msg_test/INFO] Simulation time 20

$ ./host_on_off_processes ${srcdir:=.}/../../../examples/platforms/small_platform.xml ${srcdir:=.}/host_on_off_processes_d.xml 3 --log=no_loc --log=msg.thresh:error --log=surf_maxmin.thresh:error
> [Tremblay:test:(1) 0.000000] [msg_test/INFO] Test 3 (turn off src during a communication) : Create a Process/task to make a communication between Jupiter and Tremblay and turn off Jupiter during the communication
> [Tremblay:commRX:(2) 10.000000] [msg_test/INFO]   Start RX
> [Jupiter:commTX:(3) 10.000000] [msg_test/INFO]   Start TX
> [Tremblay:test:(1) 10.000000] [msg_test/INFO]   number of processes: 3
> [Tremblay:test:(1) 20.000000] [msg_test/INFO]   Turn Jupiter off
> [Tremblay:test:(1) 20.000000] [msg_test/INFO] Test 3 seems ok  (number of Process : 2, it should be 1 or 2 if RX has not been satisfied) cool, you can now turn off a node that has a process paused by a sleep call
> [Tremblay:commRX:(2) 20.000000] [msg_test/INFO]   Receive message: TRANSFERT_FAILURE
> [Tremblay:commRX:(2) 20.000000] [msg_test/INFO]   RX Done
> [20.000000] [msg_test/INFO] Simulation time 20
