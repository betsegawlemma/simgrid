### Make Libs

include(${PROJECT_DIRECTORY}/CPACK/src/CMakeFLEXml.txt)

if(supernovae)
	include(${PROJECT_DIRECTORY}/CPACK/src/CMakeSupernovae.txt)
else(supernovae)
	add_library(simgrid SHARED ${simgrid_sources})
	add_library(gras SHARED ${gras_sources})
	add_library(smpi STATIC ${SMPI_SRC})
endif(supernovae)

set(GRAS_DEP "pthread")
set(SIMGRID_DEP "")
set(SMPI_DEP "")

if(CMAKE_SYSTEM_NAME MATCHES "Darwin")
	set(GRAS_DEP "pthread -D_OPEN_SOURCE")
	set(SIMGRID_DEP "-D_OPEN_SOURCE")
	set(SMPI_DEP "-D_OPEN_SOURCE")
endif(CMAKE_SYSTEM_NAME MATCHES "Darwin")


if(pthread)
	if(with_context MATCHES pthread)
		SET(SIMGRID_DEP ${SIMGRID_DEP}pthread)
		SET(ESPACE " ")
	endif(with_context MATCHES pthread)
	
	if(with_context MATCHES windows)
		SET(GRAS_DEP "")
	endif(with_context MATCHES windows)
endif(pthread)

if(HAVE_LUA)
	SET(SIMGRID_DEP "${SIMGRID_DEP}${ESPACE}-ldl -llua5.1")
endif(HAVE_LUA)

if(HAVE_GTNETS)
	SET(SIMGRID_DEP_GTNETS "gtnets ")
endif(HAVE_GTNETS)

### Add definitions for compile
#set(CMAKE_CXX_FLAGS "-fprofile-arcs -ftest-coverage")
#set(CMAKE_C_FLAGS "-fprofile-arcs -ftest-coverage")

#add_definitions (-fprofile-arcs -ftest-coverage)
target_link_libraries(simgrid 	${SIMGRID_DEP} ${SIMGRID_DEP_GTNETS}-fprofile-arcs)
target_link_libraries(gras 	${GRAS_DEP} -fprofile-arcs)
target_link_libraries(smpi 	${SMPI_DEP} -fprofile-arcs)

### Make EXEs

#tools
#tools/tesh
add_subdirectory(${PROJECT_DIRECTORY}/tools/tesh)

#tools/gras
add_subdirectory(${PROJECT_DIRECTORY}/tools/gras)

if(NOT init)
	#testsuite/xbt
	add_subdirectory(${PROJECT_DIRECTORY}/testsuite/xbt)

	#testsuite/surf
	add_subdirectory(${PROJECT_DIRECTORY}/testsuite/surf)

	#testsuite/simdag
	add_subdirectory(${PROJECT_DIRECTORY}/testsuite/simdag)

	#teshsuite
	add_subdirectory(${PROJECT_DIRECTORY}/teshsuite/xbt)
	add_subdirectory(${PROJECT_DIRECTORY}/teshsuite/gras/datadesc)
	add_subdirectory(${PROJECT_DIRECTORY}/teshsuite/gras/msg_handle)
	add_subdirectory(${PROJECT_DIRECTORY}/teshsuite/simdag)
	add_subdirectory(${PROJECT_DIRECTORY}/teshsuite/simdag/network)
	add_subdirectory(${PROJECT_DIRECTORY}/teshsuite/simdag/network/p2p)
	add_subdirectory(${PROJECT_DIRECTORY}/teshsuite/simdag/network/mxn)
	add_subdirectory(${PROJECT_DIRECTORY}/teshsuite/simdag/partask)
	add_subdirectory(${PROJECT_DIRECTORY}/teshsuite/simdag/platforms)
	add_subdirectory(${PROJECT_DIRECTORY}/teshsuite/msg)

	#examples
	add_subdirectory(${PROJECT_DIRECTORY}/examples/gras/ping)
	add_subdirectory(${PROJECT_DIRECTORY}/examples/gras/rpc)
	add_subdirectory(${PROJECT_DIRECTORY}/examples/gras/spawn)
	add_subdirectory(${PROJECT_DIRECTORY}/examples/gras/timer)
	add_subdirectory(${PROJECT_DIRECTORY}/examples/gras/chrono)
	add_subdirectory(${PROJECT_DIRECTORY}/examples/gras/mutual_exclusion/simple_token)
	add_subdirectory(${PROJECT_DIRECTORY}/examples/gras/mmrpc)
	add_subdirectory(${PROJECT_DIRECTORY}/examples/gras/all2all)
	add_subdirectory(${PROJECT_DIRECTORY}/examples/gras/pmm)
	add_subdirectory(${PROJECT_DIRECTORY}/examples/gras/synchro)
	add_subdirectory(${PROJECT_DIRECTORY}/examples/gras/properties)

	add_subdirectory(${PROJECT_DIRECTORY}/examples/msg/properties)
	add_subdirectory(${PROJECT_DIRECTORY}/examples/msg/actions)
	add_subdirectory(${PROJECT_DIRECTORY}/examples/msg/migration)
	add_subdirectory(${PROJECT_DIRECTORY}/examples/msg/sendrecv)
	add_subdirectory(${PROJECT_DIRECTORY}/examples/msg/suspend)
	add_subdirectory(${PROJECT_DIRECTORY}/examples/msg/parallel_task)
	add_subdirectory(${PROJECT_DIRECTORY}/examples/msg/priority)
	add_subdirectory(${PROJECT_DIRECTORY}/examples/msg/masterslave)
	add_subdirectory(${PROJECT_DIRECTORY}/examples/msg/trace)
	if(HAVE_GTNETS)
		add_subdirectory(${PROJECT_DIRECTORY}/examples/msg/gtnets)
	endif(HAVE_GTNETS)

	add_subdirectory(${PROJECT_DIRECTORY}/examples/amok/bandwidth)
	add_subdirectory(${PROJECT_DIRECTORY}/examples/amok/saturate)

	add_subdirectory(${PROJECT_DIRECTORY}/examples/simdag)
	add_subdirectory(${PROJECT_DIRECTORY}/examples/simdag/dax)
	add_subdirectory(${PROJECT_DIRECTORY}/examples/simdag/metaxml)
	add_subdirectory(${PROJECT_DIRECTORY}/examples/simdag/properties)
	add_subdirectory(${PROJECT_DIRECTORY}/examples/smpi)

	if(HAVE_JAVA)
		message("Make : src/simgrid.jar with : ${JAVA_COMPILE}")
		exec_program("rm -rf ${PROJECT_DIRECTORY}/src/.classes" OUTPUT_VARIABLE "SIM_JAR_OK")
		exec_program("mkdir ${PROJECT_DIRECTORY}/src/.classes" OUTPUT_VARIABLE "SIM_JAR_OK")
		exec_program("${JAVA_COMPILE}" ARGS "-d ${PROJECT_DIRECTORY}/src/.classes -cp ${PROJECT_DIRECTORY}/src/.classes ${PROJECT_DIRECTORY}/src/java/simgrid/msg/*.java" OUTPUT_VARIABLE "SIM_JAR_OK")
		exec_program("mkdir ${PROJECT_DIRECTORY}/src/.classes/surf" OUTPUT_VARIABLE "SIM_JAR_OK")
		exec_program("cp ${PROJECT_DIRECTORY}/src/surf/simgrid.dtd ${PROJECT_DIRECTORY}/src/.classes/surf/simgrid.dtd" OUTPUT_VARIABLE "SIM_JAR_OK")
		exec_program("${JAVA_ARCHIVE}" ARGS "cvf ./src/simgrid.jar -C ${PROJECT_DIRECTORY}/src/.classes ." OUTPUT_VARIABLE "SIM_JAR_OK")

		message("Make examples/java with : ${JAVA_COMPILE}")
		exec_program("rm ${PROJECT_DIRECTORY}/examples/java/basic/*.class" OUTPUT_VARIABLE "SIM_JAR_OK")
		exec_program("${JAVA_COMPILE}" ARGS "-d ${PROJECT_DIRECTORY}/examples/java/basic -cp ${PROJECT_DIRECTORY}/src/.classes ${PROJECT_DIRECTORY}/examples/java/basic/*.java"  OUTPUT_VARIABLE "SIM_JAR_OK")
		exec_program("rm ${PROJECT_DIRECTORY}/examples/java/ping_pong/*.class" OUTPUT_VARIABLE "SIM_JAR_OK")
		exec_program("${JAVA_COMPILE}" ARGS "-d ${PROJECT_DIRECTORY}/examples/java/ping_pong -cp ${PROJECT_DIRECTORY}/src/.classes ${PROJECT_DIRECTORY}/examples/java/ping_pong/*.java"  OUTPUT_VARIABLE "SIM_JAR_OK")
		exec_program("rm ${PROJECT_DIRECTORY}/examples/java/comm_time/*.class" OUTPUT_VARIABLE "SIM_JAR_OK")
		exec_program("${JAVA_COMPILE}" ARGS "-d ${PROJECT_DIRECTORY}/examples/java/comm_time -cp ${PROJECT_DIRECTORY}/src/.classes ${PROJECT_DIRECTORY}/examples/java/comm_time/*.java"  OUTPUT_VARIABLE "SIM_JAR_OK")
		exec_program("rm ${PROJECT_DIRECTORY}/examples/java/suspend/*.class" OUTPUT_VARIABLE "SIM_JAR_OK")
		exec_program("${JAVA_COMPILE}" ARGS "-d ${PROJECT_DIRECTORY}/examples/java/suspend -cp ${PROJECT_DIRECTORY}/src/.classes ${PROJECT_DIRECTORY}/examples/java/suspend/*.java"  OUTPUT_VARIABLE "SIM_JAR_OK")

	endif(HAVE_JAVA)

endif(NOT init)
