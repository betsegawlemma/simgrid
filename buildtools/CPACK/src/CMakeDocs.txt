if(MAINTAINER_MODE)

	find_path(FIG2DEV_PATH	NAMES fig2dev	PATHS NO_DEFAULT_PATHS)
	find_path(DOXYGEN_PATH	NAMES doxygen	PATHS NO_DEFAULT_PATHS)
	find_path(BIBTOOL_PATH	NAMES bibtool	PATHS NO_DEFAULT_PATHS)

	if(NOT EXISTS "${PROJECT_DIRECTORY}/bibtex2html-1.02/src/bibtex2html")
		write_file("${PROJECT_DIRECTORY}/CPACK/bibtex2html_install.sh"
		"#! /bin/sh
		wget ftp://ftp-sop.inria.fr/epidaure/Softs/bibtex2html/bibtex2html-1.02.tar.gz
		rm -rf bibtex2html-1.02
		tar -xvf bibtex2html-1.02.tar.gz
		rm bibtex2html-1.02.tar.gz
		cd bibtex2html-1.02/src
		make"
		)
		exec_program("chmod a=rwx ${PROJECT_DIRECTORY}/CPACK/bibtex2html_install.sh")
		exec_program("${PROJECT_DIRECTORY}/CPACK/bibtex2html_install.sh" OUTPUT_VARIABLE OKITOKI)

		if(EXISTS "${PROJECT_DIRECTORY}/bibtex2html-1.02/src/bibtex2html")
		set(BIBTEX2HTML_PATH ${PROJECT_DIRECTORY}/bibtex2html-1.02/src)
		else(EXISTS "${PROJECT_DIRECTORY}/bibtex2html-1.02/src/bibtex2html")
		set(BIBTEX2HTML_PATH NOT_FOUND)
		endif(EXISTS "${PROJECT_DIRECTORY}/bibtex2html-1.02/src/bibtex2html")

	else(NOT EXISTS "${PROJECT_DIRECTORY}/bibtex2html-1.02/src/bibtex2html")
		set(BIBTEX2HTML_PATH ${PROJECT_DIRECTORY}/bibtex2html-1.02/src)
	endif(NOT EXISTS "${PROJECT_DIRECTORY}/bibtex2html-1.02/src/bibtex2html")

	find_path(ICONV_PATH	NAMES iconv	PATHS NO_DEFAULT_PATHS)
	find_path(MAKE_PATH	NAMES make	PATHS NO_DEFAULT_PATHS)

	exec_program("rm -rf ${PROJECT_DIRECTORY}/doc/html"  "${PROJECT_DIRECTORY}/doc/")
	exec_program("mkdir -p ${PROJECT_DIRECTORY}/doc/html"  "${PROJECT_DIRECTORY}/doc/")
	exec_program("find ${PROJECT_DIRECTORY}/tools/gras  ${PROJECT_DIRECTORY}/src ${PROJECT_DIRECTORY}/include -name \"*.[chl]\"" OUTPUT_VARIABLE LISTE_UNE)
	exec_program("find ${PROJECT_DIRECTORY} -name \"*.doc\" |grep -v logcategories.doc"  "${PROJECT_DIRECTORY}/doc/" OUTPUT_VARIABLE LISTE_DEUX)


	set(DOCSSOURCES "${LISTE_UNE}\n${LISTE_DEUX}")
	string(REPLACE "\n" ";" DOCSSOURCES ${DOCSSOURCES})

	set(FIGS
	${PROJECT_DIRECTORY}/doc/fig/simgrid_modules.fig
	${PROJECT_DIRECTORY}/doc/fig/simgrid_modules2.fig
	${PROJECT_DIRECTORY}/doc/fig/amok_bw_test.fig
	${PROJECT_DIRECTORY}/doc/fig/amok_bw_sat.fig
	${PROJECT_DIRECTORY}/doc/fig/gras_comm.fig
	)

	string(REPLACE ".fig" ".png\n" LISTE_TROIS ${FIGS})

	set(PNGS 
	${PROJECT_DIRECTORY}/doc/webcruft/simgrid_logo.png
	${PROJECT_DIRECTORY}/doc/webcruft/simgrid_logo_small.png
	${PROJECT_DIRECTORY}/doc/webcruft/poster_thumbnail.png
	)

	SET(PRINT false)

	if(PRINT)

	message("${DOXYGEN_PATH}/doxygen")
	message("${FIG2DEV_PATH}/fig2dev")
	message("${BIBTOOL_PATH}/bibtool")
	message("${BIBTEX2HTML_PATH}/bibtex2html")
	message("${ICONV_PATH}/iconv")
	message("\n")

	endif(PRINT)

	if(DOXYGEN_PATH AND FIG2DEV_PATH)

		exec_program("${FIG2DEV_PATH}/fig2dev -Lmap ${PROJECT_DIRECTORY}/doc/fig/simgrid_modules.fig | grep -e IMG -e MAP -e AREA | sed 's/imagemap/simgrid_modules/g' | sed 's/\\.gif/.png/' | sed 's/<IMG /<IMG style=\"border:0px \"/g' | sed 's/\\.gif/.png/' > ${PROJECT_DIRECTORY}/doc/simgrid_modules.map"  "${PROJECT_DIRECTORY}/doc/")

		foreach(file ${FIGS})
			string(REPLACE ".fig" ".png" tmp_file ${file})
			string(REPLACE "${PROJECT_DIRECTORY}/doc/fig/" "${PROJECT_DIRECTORY}/doc/html/" tmp_file ${tmp_file})
			exec_program("${FIG2DEV_PATH}/fig2dev -Lpng ${file} > ${tmp_file}"  "${PROJECT_DIRECTORY}/doc/")
		endforeach(file ${FIGS})


		exec_program("touch ${PROJECT_DIRECTORY}/doc/index-API.doc ${PROJECT_DIRECTORY}/doc/.FAQ.doc.toc ${PROJECT_DIRECTORY}/doc/.index.doc.toc ${PROJECT_DIRECTORY}/doc/.contrib.doc.toc ${PROJECT_DIRECTORY}/doc/.history.doc.toc"  "${PROJECT_DIRECTORY}/doc/")
		exec_program("test -e ${PROJECT_DIRECTORY}/doc/html || mkdir ${PROJECT_DIRECTORY}/doc/html"  "${PROJECT_DIRECTORY}/doc/")

		foreach(file ${PNGS})
			exec_program("cp ${file} ${PROJECT_DIRECTORY}/doc/html/"  "${PROJECT_DIRECTORY}/doc/")
		endforeach(file ${PNGS})

		exec_program("cp ${PROJECT_DIRECTORY}/doc/webcruft/Paje_MSG_screenshot_thn.jpg ${PROJECT_DIRECTORY}/doc/webcruft/Paje_MSG_screenshot.jpg ${PROJECT_DIRECTORY}/doc/html/"  "${PROJECT_DIRECTORY}/doc/")
		exec_program("cp ${PROJECT_DIRECTORY}/doc/simgrid.css ${PROJECT_DIRECTORY}/doc/html/"  "${PROJECT_DIRECTORY}/doc/") 

		set(top_srcdir "..")
		set(WARNING "This file is generated, do not edit")
		set(srcdir ".")
		configure_file(${PROJECT_DIRECTORY}/doc/Doxyfile.in ${PROJECT_DIRECTORY}/doc/Doxyfile @ONLY)
	# First pass
		exec_program("${DOXYGEN_PATH}/doxygen ${PROJECT_DIRECTORY}/doc/Doxyfile" "${PROJECT_DIRECTORY}/doc/")

		exec_program("${PROJECT_DIRECTORY}/tools/doxygen/index_create.pl simgrid.tag index-API.doc"  "${PROJECT_DIRECTORY}/doc/")
		exec_program("${PROJECT_DIRECTORY}/tools/doxygen/toc_create.pl ${PROJECT_DIRECTORY}/FAQ.doc ${PROJECT_DIRECTORY}/doc/index.doc ${PROJECT_DIRECTORY}/doc/contrib.doc ${PROJECT_DIRECTORY}/doc/gtut-introduction.doc ${PROJECT_DIRECTORY}/doc/history.doc" "${PROJECT_DIRECTORY}/doc/")
	# Second pass
		exec_program("${DOXYGEN_PATH}/doxygen ${PROJECT_DIRECTORY}/doc/Doxyfile" "${PROJECT_DIRECTORY}/doc/")
	# Post-processing
		exec_program("rm -f ${PROJECT_DIRECTORY}/doc/html/dir*"  "${PROJECT_DIRECTORY}/doc/")
		exec_program("${PROJECT_DIRECTORY}/tools/doxygen/index_php.pl ${PROJECT_DIRECTORY}/doc/index.php.in ${PROJECT_DIRECTORY}/doc/html/index.html ${PROJECT_DIRECTORY}/doc/index.php"  "${PROJECT_DIRECTORY}/doc/")
		exec_program("${PROJECT_DIRECTORY}/tools/doxygen/doxygen_postprocesser.pl"  "${PROJECT_DIRECTORY}/doc/")

	#html/gras.html:
		exec_program("echo \"<html><META HTTP-EQUIV='Refresh' content='0;URL=http://simgrid.gforge.inria.fr/doc/group__GRAS__API.html'>\" > ${PROJECT_DIRECTORY}/doc/html/gras.html"  "${PROJECT_DIRECTORY}/doc/")
		exec_program("echo \"<center><h2><br><a href='http://simgrid.gforge.inria.fr/doc/group__GRAS__API.html'>Grid Reality And Simulation.</a></h2></center></html>\" >> ${PROJECT_DIRECTORY}/doc/html/gras.html"  "${PROJECT_DIRECTORY}/doc/")
	#html/amok.html:
		exec_program("echo \"<html><META HTTP-EQUIV='Refresh' content='0;URL=http://simgrid.gforge.inria.fr/doc/group__AMOK__API.html'>\" > ${PROJECT_DIRECTORY}/doc/html/amok.html"  "${PROJECT_DIRECTORY}/doc/")
		exec_program("echo \"<center><h2><br><a href='http://simgrid.gforge.inria.fr/doc/group__AMOK__API.html'>Advanced Metacomputing Overlay Kit.</a></h2></center></html>\" >> ${PROJECT_DIRECTORY}/doc/html/amok.html"  "${PROJECT_DIRECTORY}/doc/")
	#html/msg.html:
		exec_program("echo \"<html><META HTTP-EQUIV='Refresh' content='0;URL=http://simgrid.gforge.inria.fr/doc/group__MSG__API.html'>\" > ${PROJECT_DIRECTORY}/doc/html/msg.html"  "${PROJECT_DIRECTORY}/doc/")
		exec_program("echo \"<center><h2><br><a href='http://simgrid.gforge.inria.fr/doc/group__MSG__API.html'>Meta SimGrid.</a></h2></center></html>\" >> ${PROJECT_DIRECTORY}/doc/html/msg.html"  "${PROJECT_DIRECTORY}/doc/")
	#html/simdag.html:
		exec_program("echo \"<html><META HTTP-EQUIV='Refresh' content='0;URL=http://simgrid.gforge.inria.fr/doc/group__SD__API.html'>\" > ${PROJECT_DIRECTORY}/doc/html/simdag.html"  "${PROJECT_DIRECTORY}/doc/")
		exec_program("echo \"<center><h2><br><a href='http://simgrid.gforge.inria.fr/doc/group__SD__API.html'>DAG Simulator.</a></h2></center></html>\" >> ${PROJECT_DIRECTORY}/doc/html/simdag.html"  "${PROJECT_DIRECTORY}/doc/")

	if(BIBTOOL_PATH AND BIBTEX2HTML_PATH AND ICONV_PATH)

	#publis_count.html: all.bib
		exec_program("${PROJECT_DIRECTORY}/tools/doxygen/bibtex2html_table_count.pl < ${PROJECT_DIRECTORY}/doc/all.bib > ${PROJECT_DIRECTORY}/doc/publis_count.html"  "${PROJECT_DIRECTORY}/doc/")

	#publis_core.bib: all.bib 
		exec_program("${BIBTOOL_PATH}/bibtool -- 'select.by.string={category \"core\"}' -- 'preserve.key.case={on}' -- 'preserve.keys={on}' ${PROJECT_DIRECTORY}/doc/all.bib -o ${PROJECT_DIRECTORY}/doc/publis_core.bib"  "${PROJECT_DIRECTORY}/doc/")

	#publis_extern.bib: all.bib 
		exec_program("${BIBTOOL_PATH}/bibtool -- 'select.by.string={category \"extern\"}' -- 'preserve.key.case={on}' -- 'preserve.keys={on}' ${PROJECT_DIRECTORY}/doc/all.bib -o ${PROJECT_DIRECTORY}/doc/publis_extern.bib"  "${PROJECT_DIRECTORY}/doc/")

	#publis_intra.bib: all.bib 
		exec_program("${BIBTOOL_PATH}/bibtool -- 'select.by.string={category \"intra\"}' -- 'preserve.key.case={on}' -- 'preserve.keys={on}' ${PROJECT_DIRECTORY}/doc/all.bib -o ${PROJECT_DIRECTORY}/doc/publis_intra.bib"  "${PROJECT_DIRECTORY}/doc/")

	#%_bib.latin1.html: %.bib
		exec_program("find ${PROJECT_DIRECTORY}/doc/ -name \"*.bib\""  "${PROJECT_DIRECTORY}/doc/" OUTPUT_VARIABLE LISTE_QUATRE)
		string(REPLACE "\n" ";" LISTE_QUATRE ${LISTE_QUATRE})
		foreach(file ${LISTE_QUATRE})
			string(REPLACE ".bib" "_bib.latin1.html" file_tmp "${file}")
			string(REPLACE ".html" ".html.tmp" file_tmp2 "${file_tmp}")
			exec_program("${BIBTEX2HTML_PATH}/bibtex2html -single-output -nv -force -sort year -copy-icons ${file} -output ${file_tmp2} 2>&1 | grep -v 'WARNING: unknown field type'"  "${PROJECT_DIRECTORY}/doc/")
			exec_program("${PROJECT_DIRECTORY}/tools/doxygen/bibtex2html_postprocessor.pl < ${file_tmp2} > ${file_tmp}"  "${PROJECT_DIRECTORY}/doc/")
			#message("file ${file}\nfile_tmp ${file_tmp}")
		endforeach(file ${LISTE_QUATRE})


	#%_bib.html: %_bib.latin1.html
		exec_program("find ${PROJECT_DIRECTORY}/doc/ -name \"*_bib.latin1.html\""  "${PROJECT_DIRECTORY}/doc/" OUTPUT_VARIABLE LISTE_CINQ)
		string(REPLACE "\n" ";" LISTE_CINQ ${LISTE_CINQ})
		foreach(file ${LISTE_CINQ})
			string(REPLACE "_bib.latin1.html" "_bib.html" file_tmp "${file}")
			exec_program("${ICONV_PATH}/iconv --from-code latin1 --to-code utf8 ${file} --output ${file_tmp}"  "${PROJECT_DIRECTORY}/doc/")
			#message("file ${file}\nfile_tmp ${file_tmp}")
		endforeach(file ${LISTE_CINQ})
	endif(BIBTOOL_PATH AND BIBTEX2HTML_PATH AND ICONV_PATH)

	endif(DOXYGEN_PATH AND FIG2DEV_PATH)

	write_file("${PROJECT_DIRECTORY}/doc/logcategories.sh"
	"#! /bin/sh	
	pwd=`pwd`
	rm -f $pwd/logcategories.doc
	set -e
	echo "/* Generated file, do not edit */"        > $pwd/logcategories.doc
	echo "/** \addtogroup XBT_log_cats"             >> $pwd/logcategories.doc
	echo "    @{"                                   >> $pwd/logcategories.doc
	cd ${PROJECT_DIRECTORY}/src
	../tools/doxygen/xbt_log_extract_hierarchy.pl 	>> $pwd/logcategories.doc
	echo "@}*/"                                     >> $pwd/logcategories.doc"
	)
	exec_program("chmod a=rwx ${PROJECT_DIRECTORY}/doc/logcategories.sh"  "${PROJECT_DIRECTORY}/doc/")
	exec_program("${PROJECT_DIRECTORY}/doc/logcategories.sh"  "${PROJECT_DIRECTORY}/doc/")

endif(MAINTAINER_MODE)














