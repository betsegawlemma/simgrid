### ARGs use -D[var]=[ON/OFF] or [1/0] or [true/false](see after)
### ex: cmake -Denable_java=ON -Denable_gtnets=ON ./



set(BIBTEX2HTML ${BIBTEX2HTML} CACHE PATH "Path to bibtex2html")
set(gtnets_path ${gtnets_path} CACHE PATH "Path to gtnets lib")

set(custom_flags ${custom_flags} CACHE FORCE "Customers flags add to cmake_c_flag")

if(NOT prefix)
	set(prefix "/usr/local/simgrid/" CACHE PATH "Path where to install project")
else(NOT prefix)
	set(prefix ${prefix} CACHE PATH "Path where to install project")
endif(NOT prefix)

set(with_context ${with_context} CACHE TYPE INTERNAL FORCE)

if(NOT with_context)
	set(with_context "auto" CACHE TYPE INTERNAL FORCE)
endif(NOT with_context)

set(pipol_user ${pipol_user} CACHE TYPE INTERNAL FORCE)

if(CMAKE_SYSTEM_NAME MATCHES "Darwin")
	option(enable_smpi "This variable set smpi lib." off) #for the moment it doesn't compil with MacOS
else(CMAKE_SYSTEM_NAME MATCHES "Darwin")
	option(enable_smpi "This variable set smpi lib." on)
endif(CMAKE_SYSTEM_NAME MATCHES "Darwin")
option(enable_gtnets "Whether gtnets model is activated." on)
option(enable_java "Whether the Java bindings are activated." on)
if(WIN32 OR APPLE) 
option(enable_lua "Whether the lua bindings are activated." off)
option(enable_ruby "Whether the Ruby bindings are activated." off)
else(WIN32 OR APPLE)
option(enable_lua "Whether the lua bindings are activated." on)
option(enable_ruby "Whether the Ruby bindings are activated." on)
endif(WIN32 OR APPLE) 
option(enable_doc "Whether we should rebuild the documentation" off)
option(enable_compile_optimizations "" off)
option(enable_compile_warnings "Whether compilation warnings should be turned into errors." off)
option(enable_maintainer_mode "Whether flex and flexml files should be rebuilt." off)
option(enable_supernovae "Whether Supernovae mode (helping compiler optimization) is activated." off)
option(enable_tracing "Tracing MSG (for now) simulations for visualization." off)
option(enable_latency_bound_tracking "" off)
option(enable_coverage "Enable coverage." off)
option(enable_memcheck "Enable memcheck." off)
option(enable_print_message "Enable print message during config." off)
option(enable_model-checking "" off)
option(enable_lib_static "" off)
option(enable_graphviz "" off)
option(GRAS_IS_BROKEN "Set some tests are broken" off)
if(WIN32 OR APPLE) #actually not enable with windows and Apple
	message("-- Mode supernovae is disabled.")
	message("-- Smpi and GTnets are disabled.")
	set(enable_supernovae false CACHE TYPE INTERNAL FORCE)
	set(enable_smpi false CACHE TYPE INTERNAL FORCE)
	set(enable_gtnets false CACHE TYPE INTERNAL FORCE) 
	mark_as_advanced(enable_supernovae)
    mark_as_advanced(enable_smpi)
    mark_as_advanced(enable_gtnets)
    mark_as_advanced(gtnets_path)
endif(WIN32 OR APPLE)


if(enable_supernovae AND enable_model-checking)
	set(enable_model-checking false CACHE TYPE INTERNAL FORCE)
	message("\n\nWith supernovae mode the model checking must be disable.!!!\n\n")
endif(enable_supernovae AND enable_model-checking)

mark_as_advanced(PATH_PCRE_LIB)
mark_as_advanced(HAVE_SSH)
mark_as_advanced(HAVE_RSYNC)
#mark_as_advanced(enable_coverage)
#mark_as_advanced(enable_memcheck)
#mark_as_advanced(enable_print_message)
mark_as_advanced(BIBTEX2HTML_PATH)
mark_as_advanced(LUA_LIB_PATH_1)                                                                                                                      
mark_as_advanced(LUA_LIB_PATH_2)
mark_as_advanced(LUA_LIB_PATH_3)
mark_as_advanced(HAVE_LUA5_1_LAUXLIB_H)                        
mark_as_advanced(HAVE_LUA5_1_LUALIB_H)
mark_as_advanced(HAVE_LUA51_LIB)                                                                                                                                                                             
mark_as_advanced(HAVE_LUA_H)
mark_as_advanced(RUBY_LIB_PATH_1)                                                                                                                      
mark_as_advanced(RUBY_LIB_PATH_2)
mark_as_advanced(CLEAR gtnets_path)
mark_as_advanced(BUILDNAME)
mark_as_advanced(ADDR2LINE)
mark_as_advanced(BIBTOOL_PATH)
mark_as_advanced(BUILD_TESTING)
mark_as_advanced(CMAKE_BUILD_TYPE)
mark_as_advanced(CMAKE_INSTALL_PREFIX)
mark_as_advanced(DART_ROOT)
mark_as_advanced(DOXYGEN_PATH)
mark_as_advanced(FIG2DEV_PATH)
mark_as_advanced(FLEXML_EXE)
mark_as_advanced(FLEX_EXE)
mark_as_advanced(PERL_EXECUTABLE)
mark_as_advanced(GCOV_PATH)
mark_as_advanced(ICONV_PATH)
mark_as_advanced(MAKE_PATH)
mark_as_advanced(SED_EXE)
mark_as_advanced(SVN)
mark_as_advanced(GIT)
mark_as_advanced(VALGRIND_PATH)
mark_as_advanced(PATH_PCRE_H)
mark_as_advanced(CMAKE_OSX_ARCHITECTURES)                                                                                                                  
mark_as_advanced(CMAKE_OSX_DEPLOYMENT_TARGET)                                                                                                              
mark_as_advanced(CMAKE_OSX_SYSROOT)                                                                         
mark_as_advanced(HAVE_AGRAPH_H)
mark_as_advanced(HAVE_CGRAPH_H)                                                                                
mark_as_advanced(HAVE_GRAPH_H)                                                                                  
mark_as_advanced(HAVE_GRAPH_LIB)
mark_as_advanced(HAVE_CGRAPH_LIB)
mark_as_advanced(HAVE_AGRAPH_LIB)
mark_as_advanced(HAVE_CDT_LIB)
mark_as_advanced(GRAS_IS_BROKEN)