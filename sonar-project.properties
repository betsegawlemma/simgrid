# This file is used to scan the project for issues automatically 
# Browse the result here: https://nemo.sonarqube.org/overview?id=simgrid

sonar.projectKey=simgrid
sonar.projectName=SimGrid
sonar.projectVersion=3.15

sonar.links.homepage=http://simgrid.org
sonar.links.issue=https://github.com/simgrid/simgrid/issues
sonar.links.scm=https://github.com/simgrid/simgrid.git
# Comma-separated paths to directories with sources (required)
sonar.sources=src,examples,include,teshsuite


# Disable some rules on some files
sonar.issue.ignore.multicriteria=j1,jni1,jni2,c1,c2,c3

# The Object.finalize() method should not be overriden
# But we need to clean the native memory with JNI
sonar.issue.ignore.multicriteria.j1.ruleKey=squid:ObjectFinalizeOverridenCheck
sonar.issue.ignore.multicriteria.j1.resourceKey=**/*.java

# "reinterpret_cast" should not be used
# But this is exactly intended to store a pointer into a long -- what we do here
sonar.issue.ignore.multicriteria.jni1.ruleKey=cpp:S3630
sonar.issue.ignore.multicriteria.jni1.resourceKey=src/bindings/java/*.cpp

# Unused function parameters should be removed
# But JNI mandates these parameters
sonar.issue.ignore.multicriteria.jni2.ruleKey=cpp:S1172
sonar.issue.ignore.multicriteria.jni2.resourceKey=src/bindings/java/*.cpp

#Â Pointers should not be cast to integral types
# But we need that for jMSG, smpi and other places
sonar.issue.ignore.multicriteria.c1.ruleKey=cpp:S1767
sonar.issue.ignore.multicriteria.c1.resourceKey=**/*.cpp

# Preprocessor operators "#" and "##" should not be used
# This poses portability issues, but we check our usage on a large panel of architectures on purpose
sonar.issue.ignore.multicriteria.c2.ruleKey=cpp:PPStringifyAndPastingUsage
sonar.issue.ignore.multicriteria.c2.resourceKey=**/*.cpp

# Macro names should comply with a naming convention
# But the macros in this file are named after the MPI standard
sonar.issue.ignore.multicriteria.c3.ruleKey=c:PPMacroName
sonar.issue.ignore.multicriteria.c3.resourceKey=include/smpi/smpi_extended_traces.h



# Exclude some files from the analysis:
#  - our unit tests 
#  - the tests that we borrowed elsewhere (MPICH and ISP)
#  - Flex-generated files
#  - Collectives that we borrowed elsewhere (mpich, openMPI and other implems)
#  - the NAS, that are included in our examples
#  - RngStream, that is included in SimGrid
sonar.exclusions=src/*_unit.c*,teshsuite/smpi/mpich3-test/**,teshsuite/smpi/isp/**,**/*_dtd.c,**/*_dtd.h,**/*yy.c,src/smpi/colls/*,examples/smpi/NAS/*,src/xbt/RngStream.c,include/xbt/RngStream.h

# Exclude our examples from the duplication detection.
# Examples are expected to be somehow repetitive
sonar.cpd.exclusions=examples/**

# Ignore some files based on regex on their content (not working)
#sonar.issue.ignore.allfile=flexGenerated,flexMLGenerated
#  - The one that are generated from Flex
#sonar.issue.ignore.allfile.flexGenerated.fileRegexp="generated by flex"
#  - The one that are generated from FlexML (the header files are directly generated, not going though Flex)
sonar.issue.ignore.allfile.flexMLGenerated.fileRegexp="generated with the FleXML XML processor generator"

# Ignore the files that SMPI scavenged here and there (not working)
#sonar.issue.ignore.allfile=mpiColls
#sonar.issue.ignore.allfile.flexGenerated.mpiColls="Ahmad Faraj"
#sonar.issue.ignore.allfile=mpivapich
#sonar.issue.ignore.allfile.flexGenerated.mpivapich="This file is part of the MVAPICH2 software package"
#sonar.issue.ignore.allfile=mpiOmpi
#sonar.issue.ignore.allfile.flexGenerated.mpiOmpi="University of Tennessee"

# The build-wrapper output dir
sonar.cfamily.build-wrapper-output=bw-outputs

# Encoding of the source files
sonar.sourceEncoding=UTF-8

sonar.java.source=7
sonar.c.std=gnu11
sonar.cpp.std=gnu++11

# Talk to me (travis don't like it, it's too much)
# sonar.verbose=true
