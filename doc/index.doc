/*! \page index

<center>
\htmlonly
<img align=center src="simgrid_logo.png" alt="SimGrid"><br>
\endhtmlonly
</center>

\section quick Quick start

SimGrid is a toolkit that provides core functionalities for the simulation
of distributed applications in heterogeneous distributed environments.
\htmlonly <!-- ______BODY_BEGIN______ --!> \endhtmlonly
The specific goal of the project is to facilitate research in the area of
distributed and parallel application scheduling on distributed computing
platforms ranging from simple network of workstations to Computational
Grids.
\htmlonly <!-- ______BODY_END______ --!> \endhtmlonly

\subsection quick_dl Getting and installing the software

  - The official webpage is <a href="http://simgrid.gforge.inria.fr/">simgrid.gforge.inria.fr</a>. 
  - The development webpage is <a href="https://gforge.inria.fr/projects/simgrid//">gforge.inria.fr/projects/simgrid</a>. 
  - The user mailing list is <simgrid-user@lists.gforge.inria.fr>
  - The SimGrid software package can be downloaded from <a href="https://gforge.inria.fr/frs/?group_id=12">here</a>. 

To compile and install it, simply type the following. If you are not
familiar with compiling C files under UNIX and using libraries, please check
the \ref faq. SimGrid also works under Windows, but we do not distribute any
pre-compiled binaries [yet].

\verbatim $ ./configure
 $ make all
 [become root]
 # make install\endverbatim
 
\subsection quick_more More information

The API (along with some example of
use) is described in \ref SimGrid_API.

For more information about the SimGrid toolkit, please simply keep reading
this page. It is organized as follow:

  - \ref overview : Presentation of the toolkit, of each of its components
    and of their interactions.
  - \ref people : Who is behind this project.
  - \ref publis : Some articles providing more details about the
    SimGrid toolkit or using and validating it.

<hr>

\section overview Overview of the toolkit components

As depicted by the following diagram, the SimGrid toolkit is basically
three-layered (click on the picture to jump to a specific component).

\htmlonly <!-- ______BODY_BEGIN______ --!> \endhtmlonly
\htmlonly
<center>
\endhtmlonly
\htmlinclude simgrid_modules.map
\htmlonly
<br><b>Relationships between the SimGrid components</b>
</center>
\endhtmlonly

\subsection overview_envs Programmation environments layer

SimGrid provides several programmation environments built on top of a uniq
simulation kernel. Each environment targets a specific audiance and
constitutes a different paradigm. To choose which of them you want to use,
you have to think about what you want to do and what would be the result of
your work.

 - If you want to study a theoritical problem and compare several
   heuristics, you probably want to try <b>\ref MSG_API</b> (yet another
   historical name). It was designed exactly to that extend and should allow
   you to build easily rather realistic multi-agents simulation. Yet,
   realism is not the main goal of this environment and the most annoying
   technical issues of real platforms are masked here. Check the \ref
   MSG_API section for more information.

 - If you want to study the behaviour of a MPI application using emulation
   technics, you should have a look at the <b>\ref SMPI_API</b> (Simulated
   MPI) programming environment. Unfortunately, this work is still underway.
   Check the \ref SMPI_API section for more information. 
   
 - If you want to develop a real distributed application, then you may find
   <b>\ref GRAS_API</b> (Grid Reality And Simulation) useful. This is an API
   for the realization of distributed applications. 
   \n\n
   Moreover, there is two implementations of this API: one on top of the
   SURF (allowing to develop and test your application within the comfort of
   the simulator) and another suited for deployment on real platforms
   (allowing the resulting application to be highly portable and extremely
   efficient).
   \n\n
   Even if you do not plan to run your code for real, you may want to switch
   to GRAS if you intend to use MSG in a very intensive way (e.g. for
   simulating a peer-to-peer environment).
   \n\n
   See the \ref GRAS_API section for more details.

If your favorite programming environment/model is not there (BSP,
components, DAG, etc.) is not represented in the SimGrid toolkit yet, you may
consider adding it. You should contact us first on the 
<a href=http://lists.gforge.inria.fr/mailman/listinfo/simgrid-devel>SimGrid 
developers mailing list</a>, though.

\subsection overview_kernel Simulation kernel layer

The core functionnalities to simulate a virtual platform are provided by a
module called <b>\ref SURF_API</b> ("that's historical, my friend").  It is
very low-level and is not intended to be used as such by end-users. Instead,
it serve as a basis for the higher level layer.

SURF main features are a fast max-min linear solver and the ability to
change transparently the model used to describe the platform. This greatly
eases the comparison of the several models existing in the litterature.

See the \ref SURF_API section for more details.

\subsection overview_fondation Base layer

The base of the whole toolkit is constituted by the <b>\ref XBT_API
(eXtended Bundle of Tools)</b>.

It is a portable library providing some grounding features such as \ref
XBT_log, \ref XBT_ex and \ref XBT_config. XBT also encompass
the following convenient datastructures: \ref XBT_dynar, \ref XBT_fifo, \ref
XBT_dict, \ref XBT_heap, \ref XBT_set and \ref XBT_swag.

See the \ref XBT_API section for more details.


Any question, remark or suggestion are welcome on the 
<a href=http://lists.gforge.inria.fr/mailman/listinfo/simgrid-user>SimGrid users
mailing list</a>.
\htmlonly <!-- ______BODY_END______ --!> \endhtmlonly

<hr>

\section people People

SimGrid is a joint project between University of Hawai at Manoa, ID
Laboratory (Grenoble, France) and University of Nancy (France). The
authors of SimGrid are:

 - Henri Casanova <casanova#cs.ucsd.edu> (Information and Computer Sciences Department, University of Hawai`i at Manoa)
 - Arnaud Legrand <arnaud.legrand#imag.fr> ("Informatique et Distribution" Laboratory (Grenoble, France), MESCal project)
 - Martin Quinson <martin.quinson#loria.fr> (University of Nancy (Nancy, France), LORIA Laboratory, Algorille project)

\subsection contributers Contributers and alumni project members

 - Loris Marchal: wrote the algorithm for simulation TCP bandwidth-sharing.
 - Julien Lerouge : wrote a XML parser for ENV descriptions and helped for
   the general design during a 4 month period (march-june 2002) 
   in the LIP.
 - Clément Menier and Marc Perache : wrote a first prototype of the MSG
   interface during a project at ENS-Lyon (jan 2002). 
 - Dmitrii Zagorodnov : wrote some parts of the first version of SimGrid
   (1999). 

<hr>

*/
