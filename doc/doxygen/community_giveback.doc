/*! @page community_giveback Giving back to SimGrid

@tableofcontents

We are sometimes asked by users how to give back to the project. Here
are some ideas, but if you have new ones, feel free.

@section contributing_spread Spread the word

There is many ways to help the SimGrid project. The first and most
natural one is to <b>use it for your research, and say so</b>. Cite
the SimGrid framework in your paper and discuss of its advantages with
your colleagues to spread the word. When we ask for new fundings to
sustain the project, the amount of publications enabled by SimGrid is
always the first question that we get. The more you use the framework,
the better for us. 

We use several systems to detect the scientific publications citing
our work, so actually citing correctly the framework (see 
<a href="http://simgrid.gforge.inria.fr/Publications.html">here</a>)
should be enough to get us adding your paper to our list. But if you
remark that your paper is missing on 
<a href="http://simgrid.gforge.inria.fr/Usages.html">our 
page listing all papers using SimGrid</a>, please say so. Likewise, if
your paper is badly cited, please drop us an email so that we can fix
it.

Also, <b>help us constituting an active and welcoming user
community</b>. Get subscribed to the mailing lists, and answer the
questions that newcommers have if you can. Point them (gentely ;) to
the relevant part of the documentation on need, and help them becoming
part of our community too. 

Another easy way to help the project is to add a link to the
<a href="http://simgrid.gforge.inria.fr">SimGrid homepage</a>
on your homepage to <b>improve SimGrid's ranking in the search
engines</b>. Internet visibility is a battle where you can make the
difference. This can be done by adding the following html snipet to
your page, that simply renders as <a href="http://simgrid.gforge.inria.fr/">Simgrid</a>.

@verbatim
<a href="http://simgrid.gforge.inria.fr/" 
   title="Versatile simulation of distributed systems: Grid Simulator, P2P simulator, MPI simulator, Cloud Simulator or HPC Simulator">
   Simgrid</a>
@endverbatim

Or you can prefer this version with a little logo (if you want to
contribute another logo for that, please don't hesitate ;)
<img src="http://simgrid.gforge.inria.fr/logos/simgrid_logo.png"/>

@verbatim
<a href="http://simgrid.gforge.inria.fr/" 
   title="Versatile simulation of distributed systems: Grid Simulator, P2P simulator, MPI simulator, Cloud Simulator or HPC Simulator">
   <img src="http://simgrid.gforge.inria.fr/logos/simgrid_logo.png"
        alt="Versatile simulation of distributed systems: Grid Simulator, P2P simulator, MPI simulator, Cloud Simulator or HPC Simulator" align="center"> 
</a>
@endverbatim

Finally, if you organize a scientific event where you expect many
potential users, <b>invite us to give a tutorial on SimGrid</b>. We
found that 45 minutes to one hour is sufficient. It allows to explain
the main motivations and outcomes of the project in order to motivate
the attendees get more information on SimGrid, and eventually improve
their scientific habits by using a sound simulation framework. 
<a href="http://webloria.loria.fr/~quinson/blog/2012/1120/Simgrid_at_Louvain/">Here</a>
is an example of such a presentation.

@section contributing_bugs Reporting (and fixing) any issue you find

Because of its size and complexity, SimGrid is not perfect and
contains a large amount of glitches and issues. When you find one,
don't assume that it's here because we don't care. It survived only
because nobody told us. We unfortunately cannot endlessly review our
large code and documentation base. So please, <b>report any issue you
find</b>, be it a typo in the documentation, a paragraph that
needs to be reworded, a bug in the code or any other problem. The best
way to do so is to open a bug on our 
<a href="https://gforge.inria.fr/tracker/?atid=165&group_id=12&func=browse">Bug
Tracking System</a> so that we don't forget about it (we have other
obligations too and are sometimes unable to fix bugs right away, no
matter how easy the fix it). The worst way to report such issue is to
go through private emails. These are unreliable, and we are trying to
develop SimGrid openly, so private discussions are to be avoided if
possible. 

If you can provide a patch fixing the issue you report, that's even
better, and often ensures that it will get fixed very soon.

Of course, a very good way to give back to the SimGrid community is to
<b>triage and fix the bugs in the BTS</b>. If you
can come up with a patch fixing them, we will be more than happy to
apply your changes so that the entier community enjoys them.

@section contributing_contrib Contributing features and associated tools

If you deeply miss a feature in the framework, you should consider
implementing it yourself. That's free software, meaning that you are
free to help yourself. Of course, we'll do our best to assist you in
this task, so don't hesitate to contact us with your idea.

If you develop an independent tool that is somehow associated to
SimGrid, we'd love helping you gaining visibility by listing it on our 
<a href="http://simgrid.gforge.inria.fr/contrib.html">Contrib
section</a>. 

@section contributing_todo Enchancements

If you want to want to start working on the SimGrid codebase, here are a few
ideas of things that could be done to improved the current code (not all of them
are easy, though):

@subsection contributing_todo_cxxification Migration to C++

The code is being migrated to C++ but a large part is still C (or C++ with
 idioms). It would be valuable to replace C idioms with C++ ones:

 - replace XBT structures with C++ containers;

 - replace `char*` with `std::string`;

 - use RAII (`std::unique_ptr`, etc.) instead of explicit `malloc/free` or
   `new/delete`.

@subsection contributing_todo_exceptions Migration to C++

SimGrid used to implement exceptions in C. This has been replaced with C++
exceptions but some bits of the C exceptions are still remaining:

 - `xbt_ex` was the type of C exceptions. It is now a standard C++ exception.
    We might want to remove this and use a more idiomatic C++ solution.
    `std::system_error` might be used for some error categories.

 - The C API currently throws exceptions exceptions. Throwing exceptions out
   of C API is not very friendly. C code does not expect them, cannot catch
   them and cannot handle resource management properly with exceptions.
   We should clearly separate the C++ API and the C API and catch all exceptions
   before they get ouf of C APIs.

@subsection contributing_todo_futures Additions to the futures

 - Some features are missing in the Maestro future implementation
  (`simgrid::simix::Future`, `simgrid::simix::Promise`)
  could be extended to support additional features:
  `when_any`, `shared_future`, etc.

 - The corresponding feature might then be implemented in the user process
   futures.

 - We might need to provide the option to cancel a pending operation. This
   might be achieved by defining some `Action` or `Operation` class with an
   API compatible with `Future` (and convertiable to it) but with an
   additional `.cancel()` method.

@subsection contributing_todo_simcalls Simcalls cleanup

 - Remove simcalls by using the generic ones. One issue with this is that we
   didn't devise a good way to deal with generic simcalls in the model-checker
   yet.

@subsection contributing_todo_mc Model-checker

 - Find a good solution to handle generic simcalls in the model-checker.

 - Define a clear interface to be used by model-checking algorithms. The
   `Session` class in intended to expose this interface but it is not a thing
   yet.

 - Rewrite the different algorithms as implementations of the `Checker` class
   using the `Session` inteface.

 - Currently a lot of informations the model-checker reads many informations
   about the model-checked process by `process_vm_readv()`-ing brutally the
   data structure leading to some horrible code such as walking a swag from
   another process. It would be nice to have a sane way for the model-checker
   to expose the relevant information to the model-checker.

*/