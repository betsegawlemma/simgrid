/*! 
\page inside_extending Extending SimGrid 

We start to put TAGS in simgrid source code for having tutorials to see where is the important parts ans steps to create:
\li \ref simgrid_dev_guide_api
\li \ref simgrid_dev_guide_model
\li \ref simgrid_dev_guide_tag

\section simgrid_dev_guide_api How to add a new MSG function?
Search for expression \"TUTORIAL: New API\".
\verbatim
user@caraja:~/workspace/simgrid/src$ cg "TUTORIAL: New API"
 0 msg/msg_new_api.c             15 /* TUTORIAL: New API*/
 1 simix/smx_smurf.c            582 /* TUTORIAL: New API*/
 2 simix/smx_smurf.c            616 /* TUTORIAL: New API*/
 3 simix/smx_smurf_private.h    102 /* TUTORIAL: New API*/
 4 simix/smx_smurf_private.h    629 /* TUTORIAL: New API*/
 5 simix/smx_private.h           28 /* TUTORIAL: New API*/
 6 simix/smx_private.h          101 /* TUTORIAL: New API*/
 7 simix/smx_private.h          182 /* TUTORIAL: New API*/
 8 simix/smx_global.c           454 /* TUTORIAL: New API*/
 9 simix/smx_new_api.c            8 /* TUTORIAL: New API*/
10 simix/smx_user.c            1684 /* TUTORIAL: New API*/
11 simix/smx_new_api_private.h    8 /* TUTORIAL: New API*/
12 simix/smx_process.c          338 /* TUTORIAL: New API*/
\endverbatim

\section simgrid_dev_guide_model How to add a new model in surf?
A model in simgrid is composed of three classes: Model, Resource and Action
(surf_interface.hpp). 

Actually there are five kind of models: CpuModel, NetworkModel, WorkstationModel,
WorkstationVMModel and StorageModel. For each kind of model, there is an
interface (e.g.: cpu_interface.hpp) and some implementations (e.g.: cpu_cas01.hpp,
cpu_ti.hpp). 

If you want to create a new implementation of a kind of model you must extend
the classes of the corresponding interface.

If you want to create a new kind of model, you must create a new interface
 where you extend the classes Model, Resource and Action, and then create an
 implementation of this interface.

\section simgrid_dev_guide_simcall How to add a new simcall?
A simcall is used to go from user mode to kernel mode. The workflow of
a simcall is the following:

- `<ret> simcall_<name>(<args>)`
 - `simcall_BODY_<name>(<args>)`
  - create the simcall
  - `SIMIX_process_yield` if not maestro
  - ========== KERNEL MODE ==========
  - `SIMIX_simcall_pre`
   - `SIMIX_pre_<name>(simcall, <args>)`
   - `SIMIX_simcall_answer(simcall)`

To simplify the simcall creation, we have made a python script that
generate most of the code and give helpers for the remaining stuff.
The script generating the simcalls (src/simix/simcalls.in) take in input
the src/simix/simcalls.in file where the simcalls are defined and generate
the following files:

- simcall_generated_args_getter_setter.h:
  functions to get and set simcall arguments
- simcall_generated_res_getter_setter.h:
  functions to get and set simcall result
- simcall_generated_body.c:
  the BODY function of the simcall
- simcall_generated_case.c:
  the case of the SIMIX_simcall_pre function
- simcall_generated_enum.h:
  the enum of simcalls
- simcall_generated_string.c:
  string corresponding to the enum to debug

Furthermode if the simcall_<name> or the SIMIX_pre_<name> function are missing,
a warning will show up with a prototype of the corresponding fonction to fill.

The simcall.in file list all the simcalls in sections. A line starting by "##"
define a new section which will be replace by a "ifdef" in the generated code.
There is a simcall by line which follow this format:

~~~~
Simcall -> Name HasAnswer Res Args
Name -> [a-z0-9_]+
Has_Answer -> "True" | "False"
Res -> "(" Type MaybeCast ")"
Args -> Args Arg | Arg
Arg -> "(" Name "," Type MaybeCast ")"
Type -> "char" | "const char*" | "int" | "long" | "unsigned char" | "unsigned short" | "unsigned int" | "unsigned long" | "float" | "double" | "void*" | "FPtr" | "const void*" | "size_t" | "sg_size_t" | "void" | "void*"
MaybeCast -> "," Cast | ""
Cast -> [a-z0-9_* ]+
~~~~

\section simgrid_dev_guide_tag What is How to add a new tag for xml files?
Search for expression \"TUTORIAL: New TAG\".
\verbatim
user@caraja:~/workspace/simgrid/src$ cg "TUTORIAL: New TAG"
0 surf/sg_platf.c                    43 /* TUTORIAL: New TAG*/
1 surf/sg_platf.c                    89 /* TUTORIAL: New TAG*/
2 surf/sg_platf.c                   124 /* TUTORIAL: New TAG*/
3 surf/sg_platf.c                   337 /* TUTORIAL: New TAG*/
4 surf/surfxml_parse.c              769 /* TUTORIAL: New TAG*/
5 surf/surf_private.h               205 /* TUTORIAL: New TAG*/
6 surf/surfxml_parseplatf.c          64 /* TUTORIAL: New TAG*/
7 surf/surfxml_parseplatf.c          85 /* TUTORIAL: New TAG*/
8 include/simgrid/platf_interface.h  42 /* TUTORIAL: New TAG*/
\endverbatim
*/
