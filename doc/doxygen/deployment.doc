/*! @page deployment Deploy the simulation

Once you've specified your @ref platform "virtual platform" and the
@ref application "application" you want to study, you must describe
the mapping of the application onto the platform. This page says how
to do that if you go for online simulation (that is, the study of a
program), you must say which code starts on which host, with which
parameters. You can also go for offline simulation, i.e. the study of
a trace captured from a past applicative run, as briefly explained
@ref XBT_replay "here".

There is two ways to specify the mapping of your program onto virtual
hosts: either directly from your program (with @ref MSG_process_create
or as in @ref s4u_ex_basics "this S4U example"), or using an external
XML file.  You should really logically separate your application from
the deployment, as it will ease your experimental campain afterward.
How exactly you organize your work remains up to you.

@section deploy_s4u

The following example shows the several ways of doing so in the S4U
interface: @ref examples/s4u/actor-create/s4u_actor-create.cpp.
Associated XML file: @ref examples/s4u/actor-create/s4u_actor-create_d.xml

@section deploy_msg

If you're stuck with the MSG interface, then you should simply use one
of the following functions to start new actors onto your virtual
hosts: @ref MSG_process_create, @ref MSG_process_create_with_arguments
or @ref MSG_process_create_with_environment. These functions are used
in many of the provided example, just grep for them.

@section deploy_xml

This section presents how to deploy from an XML file, as it is
classically done. You will find a huge amount of examples of this in
the @c examples directory.

The deployment file looks just like a @ref platform "platform" file, except that in
this case, only two different tags are used: @c process and @c argument, whereas
the latter is just used to supply additional configuration options to the process; the
order in which the @c argument tags are given is important and depends on the application.

### The process tag ###

#### Attribute list ####

As already written above, the @c process tag is the tag that defines which host
executes which function (from your application). Hence, the @c host and @c function
attributes are mandatory; however, there are some optional attributes to the process tag. Here is a list of all attributes of this tag:

| Attribute name  | Mandatory | Values                 | Description                                                                                                               |
| --------------- | --------- | ---------------------- | -----------                                                                                                               |
| host            | yes       | String                 | Describes which host will be used to run this process. The host must be defined in the platform file!                     |
| function        | yes       | String                 | Name of a function that will be executed on this host; this function is written in userland code, for instance, C code. Valid values are functions that were registered by MSG_function_register() |
| start_time      | no        | int (Default: -1.0)    | The simulated time when this function will start to be computed.                                                          |
| kill_time       | no        | int (Default: -1.0)    | The simulated time when this function will end to be computed. By default, it stops only when it's done.                  |
| on_failure      | no        | DIE\|RESTART (Default: "DIE")   | What should be done when the process fails.                  |

#### Examples ####

Almost any @ref msg_examples include a deployment file.

### The argument tag ###

This tag must always be contained by a @c process tag - it doesn't make sense
without it.

The way this works is that the order of arguments must be pre-defined <i>by the user</i>:
It is totally up to you what <i>your</i> code expects as arguments and in which
order. The arguments will be passed to your code (that is: to the function 
executed by this process) in the order you declare them.

#### Attribute list ####

| Attribute name  | Mandatory | Values                 | Description                                                                                                               |
| --------------- | --------- | ---------------------- | -----------                                                                                                               |
| value           | yes       | String                 | Contains the value for this parameter |

*/
