/* Validating XML processor for src/surf/simgrid.dtd.
 * Generated 2010/10/11 11:35:07.
 *
 * This program was generated with the FleXML XML processor generator.
 * FleXML is Copyright (C) 1999-2005 Kristoffer Rose.  All rights reserved.
 * FleXML is Copyright (C) 2003-2006 Martin Quinson.  All rights reserved.
 * (Id: flexml.pl,v 1.62 2007/10/11 10:00:14 mquinson Exp).
 * 
 * There are two, intertwined parts to this program, part A and part B.
 *
 * Part A
 * ------
 * 
 * Some parts, here collectively called "Part A", are found in the 
 * FleXML package.  They are Copyright (C) 1999-2005 Kristoffer Rose
 * and Copyright (C) 2003-2006 Martin Quinson. All rights reserved.
 *
 * You can redistribute, use, perform, display and/or modify "Part A"
 * provided the following two conditions hold:
 *
 * 1. The program is distributed WITHOUT ANY WARRANTY from the author of
 *    FleXML; without even the implied warranty of MERCHANTABILITY or
 *    FITNESS FOR A PARTICULAR PURPOSE.
 *
 * 2. The program distribution conditions do not in any way affect the
 *    distribution conditions of the FleXML system used to generate this
 *    file or any version of FleXML derived from that system.
 *
 * Notice that these are explicit rights granted to you for files
 * generated by the FleXML system.  For your rights in connection with
 * the FleXML system itself please consult the GNU General Public License.
 * 
 * Part B
 * ------
 * 
 * The other parts, here collectively called "Part B", and which came 
 * from the DTD used by FleXML to generate this program, can be 
 * distributed (or not, as the case may be) under the terms of whoever
 * wrote them, provided these terms respect and obey the two conditions 
 * above under the heading "Part A".
 *
 * The author of and contributors to FleXML specifically disclaim
 * any copyright interest in "Part B", unless "Part B" was written 
 * by the author of or contributors to FleXML.
 * 
 */

%{

/* Version strings. */
const char rcs_surfxml_flexml_skeleton[] =
 "$" "Id: skel,v 1.40 2007/10/11 09:57:24 mquinson Exp $";
const char rcs_surfxml_flexml[] =
 "$" "Id: flexml.pl,v 1.62 2007/10/11 10:00:14 mquinson Exp $";

/* ANSI headers. */
#include <stdlib.h> /* for realloc() -- needed here when using flex 2.5.4 */
#include <stdio.h>
#include <string.h>
#include <assert.h>
#include <stdarg.h>
#include <ctype.h>
     
#if defined(_XBT_WIN32) || defined(__WIN32__) || defined(WIN32) || defined(__TOS_WIN__)
# ifndef __STRICT_ANSI__
#  include <io.h>
#  include <process.h>
# endif
#else
# include <unistd.h>
#endif
     
#ifndef FLEXML_INDEXSTACKSIZE
#define FLEXML_INDEXSTACKSIZE 1000
#endif

/* Generated definitions. */
#define FLEXML_yylineno
#ifndef FLEXML_BUFFERSTACKSIZE
#define FLEXML_BUFFERSTACKSIZE 1000000
#endif
#define FLEXML_NEED_BUFFERLIT

/* XML processor api. */
/* FleXML-provided data. */
int surfxml_pcdata_ix;
extern char *surfxml_bufferstack;
#define surfxml_pcdata (surfxml_bufferstack + surfxml_pcdata_ix)
AT_surfxml_random_generator AX_surfxml_random_generator;
#define A_surfxml_random_generator AX_surfxml_random_generator
AT_surfxml_ASroute_gw_dst AX_surfxml_ASroute_gw_dst;
#define A_surfxml_ASroute_gw_dst (surfxml_bufferstack + AX_surfxml_ASroute_gw_dst)
AT_surfxml_link_id AX_surfxml_link_id;
#define A_surfxml_link_id (surfxml_bufferstack + AX_surfxml_link_id)
AT_surfxml_trace_connect_element AX_surfxml_trace_connect_element;
#define A_surfxml_trace_connect_element (surfxml_bufferstack + AX_surfxml_trace_connect_element)
AT_surfxml_prop_id AX_surfxml_prop_id;
#define A_surfxml_prop_id (surfxml_bufferstack + AX_surfxml_prop_id)
AT_surfxml_host_id AX_surfxml_host_id;
#define A_surfxml_host_id (surfxml_bufferstack + AX_surfxml_host_id)
AT_surfxml_link_latency_file AX_surfxml_link_latency_file;
#define A_surfxml_link_latency_file (surfxml_bufferstack + AX_surfxml_link_latency_file)
AT_surfxml_process_host AX_surfxml_process_host;
#define A_surfxml_process_host (surfxml_bufferstack + AX_surfxml_process_host)
AT_surfxml_cluster_lat AX_surfxml_cluster_lat;
#define A_surfxml_cluster_lat (surfxml_bufferstack + AX_surfxml_cluster_lat)
AT_surfxml_host_state AX_surfxml_host_state;
#define A_surfxml_host_state AX_surfxml_host_state
AT_surfxml_host_availability_file AX_surfxml_host_availability_file;
#define A_surfxml_host_availability_file (surfxml_bufferstack + AX_surfxml_host_availability_file)
AT_surfxml_trace_periodicity AX_surfxml_trace_periodicity;
#define A_surfxml_trace_periodicity (surfxml_bufferstack + AX_surfxml_trace_periodicity)
AT_surfxml_prop_value AX_surfxml_prop_value;
#define A_surfxml_prop_value (surfxml_bufferstack + AX_surfxml_prop_value)
AT_surfxml_AS_id AX_surfxml_AS_id;
#define A_surfxml_AS_id (surfxml_bufferstack + AX_surfxml_AS_id)
AT_surfxml_ASroute_dst AX_surfxml_ASroute_dst;
#define A_surfxml_ASroute_dst (surfxml_bufferstack + AX_surfxml_ASroute_dst)
AT_surfxml_host_power AX_surfxml_host_power;
#define A_surfxml_host_power (surfxml_bufferstack + AX_surfxml_host_power)
AT_surfxml_link_state_file AX_surfxml_link_state_file;
#define A_surfxml_link_state_file (surfxml_bufferstack + AX_surfxml_link_state_file)
AT_surfxml_router_id AX_surfxml_router_id;
#define A_surfxml_router_id (surfxml_bufferstack + AX_surfxml_router_id)
AT_surfxml_trace_connect_trace AX_surfxml_trace_connect_trace;
#define A_surfxml_trace_connect_trace (surfxml_bufferstack + AX_surfxml_trace_connect_trace)
AT_surfxml_process_start_time AX_surfxml_process_start_time;
#define A_surfxml_process_start_time (surfxml_bufferstack + AX_surfxml_process_start_time)
AT_surfxml_cluster_suffix AX_surfxml_cluster_suffix;
#define A_surfxml_cluster_suffix (surfxml_bufferstack + AX_surfxml_cluster_suffix)
AT_surfxml_cluster_power AX_surfxml_cluster_power;
#define A_surfxml_cluster_power (surfxml_bufferstack + AX_surfxml_cluster_power)
AT_surfxml_process_function AX_surfxml_process_function;
#define A_surfxml_process_function (surfxml_bufferstack + AX_surfxml_process_function)
AT_surfxml_ASroute_src AX_surfxml_ASroute_src;
#define A_surfxml_ASroute_src (surfxml_bufferstack + AX_surfxml_ASroute_src)
AT_surfxml_cluster_prefix AX_surfxml_cluster_prefix;
#define A_surfxml_cluster_prefix (surfxml_bufferstack + AX_surfxml_cluster_prefix)
AT_surfxml_trace_file AX_surfxml_trace_file;
#define A_surfxml_trace_file (surfxml_bufferstack + AX_surfxml_trace_file)
AT_surfxml_link_sharing_policy AX_surfxml_link_sharing_policy;
#define A_surfxml_link_sharing_policy AX_surfxml_link_sharing_policy
AT_surfxml_random_min AX_surfxml_random_min;
#define A_surfxml_random_min (surfxml_bufferstack + AX_surfxml_random_min)
AT_surfxml_bypassRoute_dst AX_surfxml_bypassRoute_dst;
#define A_surfxml_bypassRoute_dst (surfxml_bufferstack + AX_surfxml_bypassRoute_dst)
AT_surfxml_link_ctn_id AX_surfxml_link_ctn_id;
#define A_surfxml_link_ctn_id (surfxml_bufferstack + AX_surfxml_link_ctn_id)
AT_surfxml_process_kill_time AX_surfxml_process_kill_time;
#define A_surfxml_process_kill_time (surfxml_bufferstack + AX_surfxml_process_kill_time)
AT_surfxml_host_availability AX_surfxml_host_availability;
#define A_surfxml_host_availability (surfxml_bufferstack + AX_surfxml_host_availability)
AT_surfxml_cluster_bb_bw AX_surfxml_cluster_bb_bw;
#define A_surfxml_cluster_bb_bw (surfxml_bufferstack + AX_surfxml_cluster_bb_bw)
AT_surfxml_argument_value AX_surfxml_argument_value;
#define A_surfxml_argument_value (surfxml_bufferstack + AX_surfxml_argument_value)
AT_surfxml_bypassRoute_src AX_surfxml_bypassRoute_src;
#define A_surfxml_bypassRoute_src (surfxml_bufferstack + AX_surfxml_bypassRoute_src)
AT_surfxml_link_state AX_surfxml_link_state;
#define A_surfxml_link_state AX_surfxml_link_state
AT_surfxml_ASroute_gw_src AX_surfxml_ASroute_gw_src;
#define A_surfxml_ASroute_gw_src (surfxml_bufferstack + AX_surfxml_ASroute_gw_src)
AT_surfxml_route_src AX_surfxml_route_src;
#define A_surfxml_route_src (surfxml_bufferstack + AX_surfxml_route_src)
AT_surfxml_AS_routing AX_surfxml_AS_routing;
#define A_surfxml_AS_routing (surfxml_bufferstack + AX_surfxml_AS_routing)
AT_surfxml_link_bandwidth AX_surfxml_link_bandwidth;
#define A_surfxml_link_bandwidth (surfxml_bufferstack + AX_surfxml_link_bandwidth)
AT_surfxml_bypassRoute_gw_dst AX_surfxml_bypassRoute_gw_dst;
#define A_surfxml_bypassRoute_gw_dst (surfxml_bufferstack + AX_surfxml_bypassRoute_gw_dst)
AT_surfxml_cluster_id AX_surfxml_cluster_id;
#define A_surfxml_cluster_id (surfxml_bufferstack + AX_surfxml_cluster_id)
AT_surfxml_random_mean AX_surfxml_random_mean;
#define A_surfxml_random_mean (surfxml_bufferstack + AX_surfxml_random_mean)
AT_surfxml_trace_id AX_surfxml_trace_id;
#define A_surfxml_trace_id (surfxml_bufferstack + AX_surfxml_trace_id)
AT_surfxml_cluster_bb_lat AX_surfxml_cluster_bb_lat;
#define A_surfxml_cluster_bb_lat (surfxml_bufferstack + AX_surfxml_cluster_bb_lat)
AT_surfxml_link_latency AX_surfxml_link_latency;
#define A_surfxml_link_latency (surfxml_bufferstack + AX_surfxml_link_latency)
AT_surfxml_cluster_radical AX_surfxml_cluster_radical;
#define A_surfxml_cluster_radical (surfxml_bufferstack + AX_surfxml_cluster_radical)
AT_surfxml_config_id AX_surfxml_config_id;
#define A_surfxml_config_id (surfxml_bufferstack + AX_surfxml_config_id)
AT_surfxml_trace_connect_kind AX_surfxml_trace_connect_kind;
#define A_surfxml_trace_connect_kind AX_surfxml_trace_connect_kind
AT_surfxml_bypassRoute_gw_src AX_surfxml_bypassRoute_gw_src;
#define A_surfxml_bypassRoute_gw_src (surfxml_bufferstack + AX_surfxml_bypassRoute_gw_src)
AT_surfxml_random_std_deviation AX_surfxml_random_std_deviation;
#define A_surfxml_random_std_deviation (surfxml_bufferstack + AX_surfxml_random_std_deviation)
AT_surfxml_link_bandwidth_file AX_surfxml_link_bandwidth_file;
#define A_surfxml_link_bandwidth_file (surfxml_bufferstack + AX_surfxml_link_bandwidth_file)
AT_surfxml_host_vivaldi AX_surfxml_host_vivaldi;
#define A_surfxml_host_vivaldi (surfxml_bufferstack + AX_surfxml_host_vivaldi)
AT_surfxml_host_state_file AX_surfxml_host_state_file;
#define A_surfxml_host_state_file (surfxml_bufferstack + AX_surfxml_host_state_file)
AT_surfxml_random_id AX_surfxml_random_id;
#define A_surfxml_random_id (surfxml_bufferstack + AX_surfxml_random_id)
AT_surfxml_route_dst AX_surfxml_route_dst;
#define A_surfxml_route_dst (surfxml_bufferstack + AX_surfxml_route_dst)
AT_surfxml_cluster_bw AX_surfxml_cluster_bw;
#define A_surfxml_cluster_bw (surfxml_bufferstack + AX_surfxml_cluster_bw)
AT_surfxml_random_max AX_surfxml_random_max;
#define A_surfxml_random_max (surfxml_bufferstack + AX_surfxml_random_max)
AT_surfxml_platform_version AX_surfxml_platform_version;
#define A_surfxml_platform_version (surfxml_bufferstack + AX_surfxml_platform_version)

/* XML state. */
#ifdef FLEX_DEBUG
# define ENTER(state)	debug_enter(state,#state)
# define LEAVE		debug_leave()
# define SET(state)	debug_set(state,#state)
  static void debug_enter(int, const char*);
  static void debug_leave(void);
  static void debug_set(int, const char*);
#else
# define ENTER(state)	(yy_push_state(state))
# define LEAVE		(yy_pop_state())
# define SET(state)	BEGIN(state)
#endif

/* Generic actions. */
#define SKIP	/*skip*/
#define SUCCEED        CLEANUP; return 0

#define FAIL	return fail
static int fail(const char*, ...);

enum {flexml_max_err_msg_size = 512};
static char flexml_err_msg[flexml_max_err_msg_size];
const char * surfxml_parse_err_msg()
{
    return flexml_err_msg;
}
static void reset_surfxml_parse_err_msg()
{
    flexml_err_msg[0] = '\0';
}

/* Cleanup */
static void cleanup(void);
#define CLEANUP  cleanup()

/* Text buffer stack handling. */
char *surfxml_bufferstack = NULL;
static int blimit = FLEXML_BUFFERSTACKSIZE;
static int bnext = 1;

static int *indexstack = NULL;
static int ilimit = FLEXML_INDEXSTACKSIZE;
static int inext = 1;

#define BUFFERSET(P)  (P = bnext)
#define BUFFERPUTC(C) (ck_blimit(), surfxml_bufferstack[bnext++] = (C))
#define BUFFERDONE    (BUFFERPUTC('\0'))

#define BUFFERLITERAL(C, P) surfxml_bufferliteral(C, &(P), yytext)

/* after this is called, there are at least 2 slots left in the stack */
static int ck_blimit()
{
     if (bnext >= blimit) {
	 blimit += FLEXML_BUFFERSTACKSIZE + 2;
	 {
	     char *temp = (char *) realloc(surfxml_bufferstack, blimit);
	     assert(temp);
	     surfxml_bufferstack = temp;
	 }
     }
     return 0;
}

/* after this is called, there are at least 2 slots left in the stack */
static int ck_ilimit()
{
     if (inext >= ilimit) {
	 ilimit += FLEXML_INDEXSTACKSIZE + 2;
	 {
	     int *temp = (int *) realloc(indexstack, ilimit);
	     assert(temp);
	     indexstack = temp;
	 }
     }
     return 0;
}

#ifdef FLEXML_NEED_BUFFERLIT
static void surfxml_bufferliteral(char c, int* pp, const char* text)
{
  const char *s = (c ? strchr(text,c) : text-1), *e = strrchr(text,c);
  assert(s <= e); BUFFERSET(*pp);
  while (++s<e) {
    if (isspace(*s) && c) { BUFFERPUTC(' '); while (isspace(*s)) ++s; }
    else BUFFERPUTC(*s);
  }
  BUFFERDONE;
}
#endif

static void pushbuffer(int p)
{
    ck_ilimit();
    indexstack[inext++] = p;
    indexstack[inext++] = bnext;    
}

static int popbuffer(void)
{
    assert(inext >= 2);
    bnext = indexstack[--inext];
    return indexstack[--inext];
}

/* General internal entities are `unput' back onto the input stream... */
#define ENTITYTEXT(T) \
  { char *s = (T), *e = s+strlen(s);\
    while (--e >= s) { unput(*e); }}


%}

/* Flex standard options. */
%option stack
%option noyy_top_state
%option noinput
%option noreject
%option noyymore
%option noyywrap

/* Flex user-requested options. */
%option yylineno
%option nounput

/* XML character classes (currently restricted to ASCII). */

/* "Common syntactic structures." */
S		[ \t\n\r\f]+
s		[ \t\n\r\f]*

/* "Names and Tokens." */
NameChar	[A-Za-z0-9.:_-]
Name		[A-Za-z_:]{NameChar}*
Names 		{Name}({S}{Name})*
Nmtoken		({NameChar})+
Nmtokens 	{Nmtoken}({S}{Nmtoken})*

/* Miscellaneous. */
VersionNum	[a-zA-Z0-9_.:-]+
Eq		{s}"="{s}
Literal		\'[^'']*\'|\"[^""]*\"

/* Parser states (flex `exclusive start conditions'):
 *
 * PROLOG	the XML prolog of the document before <?xml...>
 * DOCTYPE	the XML prolog of the document after <?xml...>
 * EPILOG	after the root element
 * INCOMMENT	inside an XML comment <!--....-->
 * INPI		inside an XML PI <?...?>
 * VALUE1	inside a '...'-delimited literal
 * VALUE2	inside a "..."-delimited literal
 * CDATA	inside a <![CDATA[...] ]> section.
 * ROOT_<tag>	expect root element <tag>
 * AL_<tag>	inside the attribute list for <tag>
 * IN_<tag>	inside a <tag> with element contents (ready for end tag)
 * IMPOSSIBLE	dummy to permit disabling rules; must be last
 */
%x PROLOG DOCTYPE EPILOG INCOMMENT INPI VALUE1 VALUE2 CDATA
%x ROOT_surfxml_platform AL_surfxml_platform S_surfxml_platform S_surfxml_platform_1 S_surfxml_platform_2 S_surfxml_platform_3 S_surfxml_platform_4 S_surfxml_platform_5 S_surfxml_platform_6 E_surfxml_platform
%x AL_surfxml_trace IN_trace
%x AL_surfxml_random S_surfxml_random S_surfxml_random_1 S_surfxml_random_2 E_surfxml_random
%x AL_surfxml_trace_connect E_surfxml_trace_connect
%x AL_surfxml_AS S_surfxml_AS S_surfxml_AS_1 S_surfxml_AS_2 S_surfxml_AS_3 S_surfxml_AS_4 S_surfxml_AS_5 S_surfxml_AS_6 S_surfxml_AS_7 S_surfxml_AS_8 S_surfxml_AS_9 S_surfxml_AS_10 S_surfxml_AS_11 S_surfxml_AS_12 S_surfxml_AS_13 E_surfxml_AS
%x AL_surfxml_host S_surfxml_host S_surfxml_host_1 S_surfxml_host_2 E_surfxml_host
%x AL_surfxml_cluster E_surfxml_cluster
%x AL_surfxml_router E_surfxml_router
%x AL_surfxml_link S_surfxml_link S_surfxml_link_1 S_surfxml_link_2 E_surfxml_link
%x AL_surfxml_route S_surfxml_route S_surfxml_route_1 S_surfxml_route_2 E_surfxml_route
%x AL_surfxml_ASroute S_surfxml_ASroute S_surfxml_ASroute_1 S_surfxml_ASroute_2 E_surfxml_ASroute
%x AL_surfxml_link_ctn E_surfxml_link_ctn
%x AL_surfxml_bypassRoute S_surfxml_bypassRoute S_surfxml_bypassRoute_1 S_surfxml_bypassRoute_2 E_surfxml_bypassRoute
%x AL_surfxml_process S_surfxml_process S_surfxml_process_1 S_surfxml_process_2 E_surfxml_process
%x AL_surfxml_argument E_surfxml_argument
%x AL_surfxml_config S_surfxml_config S_surfxml_config_1 S_surfxml_config_2 E_surfxml_config
%x AL_surfxml_prop E_surfxml_prop
%x IMPOSSIBLE

%{
/* State names. */
const char* *surfxml_statenames=NULL;
%}

%%

 /* Bypass Flex's default INITIAL state and begin by parsing the XML prolog. */
 SET(PROLOG);
 reset_surfxml_parse_err_msg();
 surfxml_bufferstack = (char *) malloc(FLEXML_BUFFERSTACKSIZE);
 assert(surfxml_bufferstack);
 #ifdef FLEX_DEBUG
 {
     int i;
     for (i = 0; i < blimit; i++) {
         surfxml_bufferstack[i] = '\377';
     }
 }
 #endif
 surfxml_bufferstack[0] = '\0';
 indexstack = (int *) malloc(FLEXML_INDEXSTACKSIZE * sizeof(int));
 assert(indexstack);
 indexstack[0] = 0;

  /* FleXML_init */
  bnext = inext = 1;
  surfxml_bufferliteral('\0', &bnext, "0.0");
  surfxml_bufferliteral('\0', &bnext, "1.0");
  surfxml_bufferliteral('\0', &bnext, "0 0 0");
  surfxml_bufferliteral('\0', &bnext, "0.0");
  surfxml_bufferliteral('\0', &bnext, "-1.0");
  surfxml_bufferliteral('\0', &bnext, "-1.0");
  if(!surfxml_statenames) {surfxml_statenames= (const char **)calloc(IMPOSSIBLE,sizeof(char*));
  surfxml_statenames[PROLOG] = NULL;
  surfxml_statenames[DOCTYPE] = NULL;
  surfxml_statenames[EPILOG] = NULL;
  surfxml_statenames[INCOMMENT] = NULL;
  surfxml_statenames[INPI] = NULL;
  surfxml_statenames[VALUE1] = NULL;
  surfxml_statenames[VALUE2] = NULL;
  surfxml_statenames[CDATA] = NULL;
  surfxml_statenames[ROOT_surfxml_platform] = NULL;
  surfxml_statenames[AL_surfxml_platform] = NULL;
  surfxml_statenames[S_surfxml_platform] = "platform";
  surfxml_statenames[S_surfxml_platform_1] = "platform";
  surfxml_statenames[S_surfxml_platform_2] = "platform";
  surfxml_statenames[S_surfxml_platform_3] = "platform";
  surfxml_statenames[S_surfxml_platform_4] = "platform";
  surfxml_statenames[S_surfxml_platform_5] = "platform";
  surfxml_statenames[S_surfxml_platform_6] = "platform";
  surfxml_statenames[E_surfxml_platform] = "platform";
  surfxml_statenames[AL_surfxml_trace] = NULL;
  surfxml_statenames[IN_trace] = "trace";
  surfxml_statenames[AL_surfxml_random] = NULL;
  surfxml_statenames[S_surfxml_random] = "random";
  surfxml_statenames[S_surfxml_random_1] = "random";
  surfxml_statenames[S_surfxml_random_2] = "random";
  surfxml_statenames[E_surfxml_random] = "random";
  surfxml_statenames[AL_surfxml_trace_connect] = NULL;
  surfxml_statenames[E_surfxml_trace_connect] = "trace_connect";
  surfxml_statenames[AL_surfxml_AS] = NULL;
  surfxml_statenames[S_surfxml_AS] = "AS";
  surfxml_statenames[S_surfxml_AS_1] = "AS";
  surfxml_statenames[S_surfxml_AS_2] = "AS";
  surfxml_statenames[S_surfxml_AS_3] = "AS";
  surfxml_statenames[S_surfxml_AS_4] = "AS";
  surfxml_statenames[S_surfxml_AS_5] = "AS";
  surfxml_statenames[S_surfxml_AS_6] = "AS";
  surfxml_statenames[S_surfxml_AS_7] = "AS";
  surfxml_statenames[S_surfxml_AS_8] = "AS";
  surfxml_statenames[S_surfxml_AS_9] = "AS";
  surfxml_statenames[S_surfxml_AS_10] = "AS";
  surfxml_statenames[S_surfxml_AS_11] = "AS";
  surfxml_statenames[S_surfxml_AS_12] = "AS";
  surfxml_statenames[S_surfxml_AS_13] = "AS";
  surfxml_statenames[E_surfxml_AS] = "AS";
  surfxml_statenames[AL_surfxml_host] = NULL;
  surfxml_statenames[S_surfxml_host] = "host";
  surfxml_statenames[S_surfxml_host_1] = "host";
  surfxml_statenames[S_surfxml_host_2] = "host";
  surfxml_statenames[E_surfxml_host] = "host";
  surfxml_statenames[AL_surfxml_cluster] = NULL;
  surfxml_statenames[E_surfxml_cluster] = "cluster";
  surfxml_statenames[AL_surfxml_router] = NULL;
  surfxml_statenames[E_surfxml_router] = "router";
  surfxml_statenames[AL_surfxml_link] = NULL;
  surfxml_statenames[S_surfxml_link] = "link";
  surfxml_statenames[S_surfxml_link_1] = "link";
  surfxml_statenames[S_surfxml_link_2] = "link";
  surfxml_statenames[E_surfxml_link] = "link";
  surfxml_statenames[AL_surfxml_route] = NULL;
  surfxml_statenames[S_surfxml_route] = "route";
  surfxml_statenames[S_surfxml_route_1] = "route";
  surfxml_statenames[S_surfxml_route_2] = "route";
  surfxml_statenames[E_surfxml_route] = "route";
  surfxml_statenames[AL_surfxml_ASroute] = NULL;
  surfxml_statenames[S_surfxml_ASroute] = "ASroute";
  surfxml_statenames[S_surfxml_ASroute_1] = "ASroute";
  surfxml_statenames[S_surfxml_ASroute_2] = "ASroute";
  surfxml_statenames[E_surfxml_ASroute] = "ASroute";
  surfxml_statenames[AL_surfxml_link_ctn] = NULL;
  surfxml_statenames[E_surfxml_link_ctn] = "link_ctn";
  surfxml_statenames[AL_surfxml_bypassRoute] = NULL;
  surfxml_statenames[S_surfxml_bypassRoute] = "bypassRoute";
  surfxml_statenames[S_surfxml_bypassRoute_1] = "bypassRoute";
  surfxml_statenames[S_surfxml_bypassRoute_2] = "bypassRoute";
  surfxml_statenames[E_surfxml_bypassRoute] = "bypassRoute";
  surfxml_statenames[AL_surfxml_process] = NULL;
  surfxml_statenames[S_surfxml_process] = "process";
  surfxml_statenames[S_surfxml_process_1] = "process";
  surfxml_statenames[S_surfxml_process_2] = "process";
  surfxml_statenames[E_surfxml_process] = "process";
  surfxml_statenames[AL_surfxml_argument] = NULL;
  surfxml_statenames[E_surfxml_argument] = "argument";
  surfxml_statenames[AL_surfxml_config] = NULL;
  surfxml_statenames[S_surfxml_config] = "config";
  surfxml_statenames[S_surfxml_config_1] = "config";
  surfxml_statenames[S_surfxml_config_2] = "config";
  surfxml_statenames[E_surfxml_config] = "config";
  surfxml_statenames[AL_surfxml_prop] = NULL;
  surfxml_statenames[E_surfxml_prop] = "prop";
  }

 /* COMMENTS and PIs: handled uniformly for efficiency. */

<ROOT_surfxml_platform,AL_surfxml_platform,S_surfxml_platform,S_surfxml_platform_1,S_surfxml_platform_2,S_surfxml_platform_3,S_surfxml_platform_4,S_surfxml_platform_5,S_surfxml_platform_6,E_surfxml_platform,AL_surfxml_trace,IN_trace,AL_surfxml_random,S_surfxml_random,S_surfxml_random_1,S_surfxml_random_2,E_surfxml_random,AL_surfxml_trace_connect,E_surfxml_trace_connect,AL_surfxml_AS,S_surfxml_AS,S_surfxml_AS_1,S_surfxml_AS_2,S_surfxml_AS_3,S_surfxml_AS_4,S_surfxml_AS_5,S_surfxml_AS_6,S_surfxml_AS_7,S_surfxml_AS_8,S_surfxml_AS_9,S_surfxml_AS_10,S_surfxml_AS_11,S_surfxml_AS_12,S_surfxml_AS_13,E_surfxml_AS,AL_surfxml_host,S_surfxml_host,S_surfxml_host_1,S_surfxml_host_2,E_surfxml_host,AL_surfxml_cluster,E_surfxml_cluster,AL_surfxml_router,E_surfxml_router,AL_surfxml_link,S_surfxml_link,S_surfxml_link_1,S_surfxml_link_2,E_surfxml_link,AL_surfxml_route,S_surfxml_route,S_surfxml_route_1,S_surfxml_route_2,E_surfxml_route,AL_surfxml_ASroute,S_surfxml_ASroute,S_surfxml_ASroute_1,S_surfxml_ASroute_2,E_surfxml_ASroute,AL_surfxml_link_ctn,E_surfxml_link_ctn,AL_surfxml_bypassRoute,S_surfxml_bypassRoute,S_surfxml_bypassRoute_1,S_surfxml_bypassRoute_2,E_surfxml_bypassRoute,AL_surfxml_process,S_surfxml_process,S_surfxml_process_1,S_surfxml_process_2,E_surfxml_process,AL_surfxml_argument,E_surfxml_argument,AL_surfxml_config,S_surfxml_config,S_surfxml_config_1,S_surfxml_config_2,E_surfxml_config,AL_surfxml_prop,E_surfxml_prop,PROLOG,DOCTYPE,EPILOG>{
 "<!--" ENTER(INCOMMENT);
 "<?" ENTER(INPI);
}
<INCOMMENT>{
 "-->"		LEAVE;
 "--"		|
 .		|
 \n		SKIP;
 <<EOF>>	FAIL("EOF in comment.");
}
<INPI>{
 "?>"		LEAVE;
 .		|
 \n		SKIP;
 <<EOF>>	FAIL("EOF in PI (processing instruction).");
}

 /* SPACES: skipped uniformly */

<ROOT_surfxml_platform,AL_surfxml_platform,S_surfxml_platform,S_surfxml_platform_1,S_surfxml_platform_2,S_surfxml_platform_3,S_surfxml_platform_4,S_surfxml_platform_5,S_surfxml_platform_6,E_surfxml_platform,AL_surfxml_trace,AL_surfxml_random,S_surfxml_random,S_surfxml_random_1,S_surfxml_random_2,E_surfxml_random,AL_surfxml_trace_connect,E_surfxml_trace_connect,AL_surfxml_AS,S_surfxml_AS,S_surfxml_AS_1,S_surfxml_AS_2,S_surfxml_AS_3,S_surfxml_AS_4,S_surfxml_AS_5,S_surfxml_AS_6,S_surfxml_AS_7,S_surfxml_AS_8,S_surfxml_AS_9,S_surfxml_AS_10,S_surfxml_AS_11,S_surfxml_AS_12,S_surfxml_AS_13,E_surfxml_AS,AL_surfxml_host,S_surfxml_host,S_surfxml_host_1,S_surfxml_host_2,E_surfxml_host,AL_surfxml_cluster,E_surfxml_cluster,AL_surfxml_router,E_surfxml_router,AL_surfxml_link,S_surfxml_link,S_surfxml_link_1,S_surfxml_link_2,E_surfxml_link,AL_surfxml_route,S_surfxml_route,S_surfxml_route_1,S_surfxml_route_2,E_surfxml_route,AL_surfxml_ASroute,S_surfxml_ASroute,S_surfxml_ASroute_1,S_surfxml_ASroute_2,E_surfxml_ASroute,AL_surfxml_link_ctn,E_surfxml_link_ctn,AL_surfxml_bypassRoute,S_surfxml_bypassRoute,S_surfxml_bypassRoute_1,S_surfxml_bypassRoute_2,E_surfxml_bypassRoute,AL_surfxml_process,S_surfxml_process,S_surfxml_process_1,S_surfxml_process_2,E_surfxml_process,AL_surfxml_argument,E_surfxml_argument,AL_surfxml_config,S_surfxml_config,S_surfxml_config_1,S_surfxml_config_2,E_surfxml_config,AL_surfxml_prop,E_surfxml_prop,PROLOG,DOCTYPE,EPILOG>{S} SKIP;

 /* PROLOG: determine root element and process it. */

<PROLOG>{
 "<?xml"({S}version{Eq}(\'{VersionNum}\'|\"{VersionNum}\"))?({S}encoding{Eq}(\'[^']*\'|\"[^"]*\"))?"?>" SET(DOCTYPE); 
 "<?xml"[^>]*">" FAIL("Bad declaration %s.",yytext);
}

<PROLOG,DOCTYPE>{
 "<!DOCTYPE"{S}"platform"{S}SYSTEM{S}("'simgrid.dtd'"|"\"simgrid.dtd\""){s}">" SET(ROOT_surfxml_platform);
 "<!"[^>-][^>]*">" FAIL("Bad declaration %s.",yytext);
 . 		FAIL("Unexpected character `%c' in prolog.", yytext[0]);
 <<EOF>> 	FAIL("EOF in prolog.");
}

 /* RULES DERIVED FROM DTD. */

 /* <!-- Small DTD for SURF based tools. -->  */

<S_surfxml_AS_10,S_surfxml_AS_3,S_surfxml_random,S_surfxml_ASroute_1,S_surfxml_AS_2,E_surfxml_AS,S_surfxml_AS_12,E_surfxml_process,S_surfxml_process,S_surfxml_link_2,E_surfxml_random,S_surfxml_AS_8,S_surfxml_bypassRoute_2,E_surfxml_route,S_surfxml_AS_9,S_surfxml_platform_3,S_surfxml_route_1,S_surfxml_AS_11,S_surfxml_link_1,S_surfxml_AS,S_surfxml_bypassRoute,S_surfxml_link,E_surfxml_host,S_surfxml_config,S_surfxml_ASroute_2,S_surfxml_random_2,S_surfxml_platform_6,S_surfxml_process_2,E_surfxml_ASroute,E_surfxml_link,S_surfxml_AS_6,S_surfxml_platform,S_surfxml_platform_1,S_surfxml_bypassRoute_1,E_surfxml_config,S_surfxml_host_1,S_surfxml_route_2,E_surfxml_platform,S_surfxml_config_2,S_surfxml_random_1,S_surfxml_platform_4,S_surfxml_AS_1,S_surfxml_host,S_surfxml_platform_2,S_surfxml_process_1,S_surfxml_host_2,S_surfxml_AS_7,S_surfxml_AS_13,S_surfxml_ASroute,S_surfxml_platform_5,S_surfxml_AS_5,S_surfxml_config_1,S_surfxml_AS_4,S_surfxml_route,E_surfxml_bypassRoute>"<platform"{s} FAIL("Starting tag <platform> is not allowed here.");

<ROOT_surfxml_platform>"<platform"{s} {
  AX_surfxml_platform_version = 1;
  ENTER(AL_surfxml_platform); pushbuffer(0);
  }

<AL_surfxml_platform>{
 "version"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_platform_version);
 "version"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_platform_version);

 ">" {
  LEAVE; STag_surfxml_platform();surfxml_pcdata_ix = 0; ENTER(S_surfxml_platform);
 }
 "/>" {
  LEAVE; STag_surfxml_platform(); surfxml_pcdata_ix = 0; ETag_surfxml_platform(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_surfxml_platform: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of platform element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `platform' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `platform' element.");
}

<S_surfxml_platform_2,S_surfxml_platform_1,S_surfxml_platform,S_surfxml_platform_4,S_surfxml_platform_6,E_surfxml_platform>{
 "</platform"{s}">" {
  LEAVE;
  ETag_surfxml_platform();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_surfxml_platform: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</platform>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</platform>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</platform>' expected.");
}

<ROOT_surfxml_trace,S_surfxml_random,S_surfxml_ASroute_1,E_surfxml_AS,E_surfxml_process,S_surfxml_process,S_surfxml_link_2,E_surfxml_random,S_surfxml_bypassRoute_2,E_surfxml_route,S_surfxml_route_1,S_surfxml_link_1,S_surfxml_bypassRoute,S_surfxml_link,E_surfxml_host,S_surfxml_config,S_surfxml_ASroute_2,S_surfxml_random_2,S_surfxml_platform_6,S_surfxml_process_2,E_surfxml_ASroute,E_surfxml_link,S_surfxml_bypassRoute_1,E_surfxml_config,S_surfxml_host_1,S_surfxml_route_2,E_surfxml_platform,S_surfxml_config_2,S_surfxml_random_1,S_surfxml_host,S_surfxml_platform_2,S_surfxml_process_1,S_surfxml_host_2,S_surfxml_ASroute,S_surfxml_platform_5,S_surfxml_config_1,S_surfxml_route,E_surfxml_bypassRoute>"<trace"{s} FAIL("Starting tag <trace> is not allowed here.");

<S_surfxml_AS_12,S_surfxml_AS_1,S_surfxml_AS_9,S_surfxml_AS_11,S_surfxml_AS_2,S_surfxml_AS_5,S_surfxml_AS_10,S_surfxml_AS_13,S_surfxml_AS,S_surfxml_AS_8,S_surfxml_platform_4,S_surfxml_AS_4,S_surfxml_AS_7,S_surfxml_platform_1,S_surfxml_platform,S_surfxml_AS_6,S_surfxml_AS_3,S_surfxml_platform_3>"<trace"{s} {
  AX_surfxml_trace_id = 0;
  AX_surfxml_trace_file = 0;
  AX_surfxml_trace_periodicity = 0;
  ENTER(AL_surfxml_trace); pushbuffer(0);
  }

<AL_surfxml_trace>{
 "id"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_trace_id);
 "id"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_trace_id);

 "file"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_trace_file);
 "file"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_trace_file);

 "periodicity"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_trace_periodicity);
 "periodicity"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_trace_periodicity);

 ">" {
  if (!AX_surfxml_trace_id) FAIL("Required attribute `id' not set for `trace' element.");
  if (!AX_surfxml_trace_periodicity) FAIL("Required attribute `periodicity' not set for `trace' element.");
  LEAVE; STag_surfxml_trace();pushbuffer(surfxml_pcdata_ix); BUFFERSET(surfxml_pcdata_ix);; ENTER(IN_trace);
 }
 "/>" {
  if (!AX_surfxml_trace_id) FAIL("Required attribute `id' not set for `trace' element.");
  if (!AX_surfxml_trace_periodicity) FAIL("Required attribute `periodicity' not set for `trace' element.");
  LEAVE; STag_surfxml_trace(); surfxml_pcdata_ix = 0; ETag_surfxml_trace(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS_8: case S_surfxml_AS_4: case S_surfxml_AS_7: case S_surfxml_AS_6: case S_surfxml_AS_3: SET(S_surfxml_AS_8); break;
   case S_surfxml_AS_11: case S_surfxml_AS_10: case S_surfxml_AS: SET(S_surfxml_AS_11); break;
   case S_surfxml_AS_2: SET(S_surfxml_AS_3); break;
   case S_surfxml_AS_1: case S_surfxml_AS_5: SET(S_surfxml_AS_6); break;
   case S_surfxml_platform_4: case S_surfxml_platform_1: case S_surfxml_platform: case S_surfxml_platform_3: SET(S_surfxml_platform_4); break;
   case S_surfxml_AS_12: case S_surfxml_AS_9: case S_surfxml_AS_13: SET(S_surfxml_AS_13); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of trace element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `trace' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `trace' element.");
}

<IN_trace>{
 "</trace"{s}">" {
  LEAVE;
  BUFFERDONE;
  ETag_surfxml_trace();
  surfxml_pcdata_ix = popbuffer();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS_8: case S_surfxml_AS_4: case S_surfxml_AS_7: case S_surfxml_AS_6: case S_surfxml_AS_3: SET(S_surfxml_AS_8); break;
   case S_surfxml_AS_11: case S_surfxml_AS_10: case S_surfxml_AS: SET(S_surfxml_AS_11); break;
   case S_surfxml_AS_2: SET(S_surfxml_AS_3); break;
   case S_surfxml_AS_1: case S_surfxml_AS_5: SET(S_surfxml_AS_6); break;
   case S_surfxml_platform_4: case S_surfxml_platform_1: case S_surfxml_platform: case S_surfxml_platform_3: SET(S_surfxml_platform_4); break;
   case S_surfxml_AS_12: case S_surfxml_AS_9: case S_surfxml_AS_13: SET(S_surfxml_AS_13); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</trace>' expected.",yytext);
 <<EOF>> FAIL("Premature EOF: `</trace>' expected.");
}

<S_surfxml_AS_10,S_surfxml_AS_3,S_surfxml_random,S_surfxml_ASroute_1,S_surfxml_AS_2,E_surfxml_AS,S_surfxml_AS_12,E_surfxml_process,S_surfxml_process,S_surfxml_link_2,E_surfxml_random,S_surfxml_AS_8,S_surfxml_bypassRoute_2,ROOT_surfxml_random,E_surfxml_route,S_surfxml_AS_9,S_surfxml_platform_3,S_surfxml_route_1,S_surfxml_AS_11,S_surfxml_link_1,S_surfxml_AS,S_surfxml_bypassRoute,S_surfxml_link,E_surfxml_host,S_surfxml_ASroute_2,S_surfxml_random_2,S_surfxml_platform_6,S_surfxml_process_2,E_surfxml_ASroute,S_surfxml_AS_6,E_surfxml_link,S_surfxml_platform,S_surfxml_platform_1,S_surfxml_bypassRoute_1,E_surfxml_config,S_surfxml_host_1,S_surfxml_route_2,E_surfxml_platform,S_surfxml_config_2,S_surfxml_random_1,S_surfxml_platform_4,S_surfxml_AS_1,S_surfxml_host,S_surfxml_platform_2,S_surfxml_process_1,S_surfxml_host_2,S_surfxml_AS_7,S_surfxml_AS_13,S_surfxml_ASroute,S_surfxml_platform_5,S_surfxml_AS_5,S_surfxml_config_1,S_surfxml_AS_4,S_surfxml_route,E_surfxml_bypassRoute>"<random"{s} FAIL("Starting tag <random> is not allowed here.");

<S_surfxml_config>"<random"{s} {
  AX_surfxml_random_id = 0;
  AX_surfxml_random_min = 0;
  AX_surfxml_random_max = 0;
  AX_surfxml_random_mean = 0;
  AX_surfxml_random_std_deviation = 0;
  AX_surfxml_random_generator = A_surfxml_random_generator_DRAND48;
  ENTER(AL_surfxml_random); pushbuffer(0);
  }

<AL_surfxml_random>{
 "id"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_random_id);
 "id"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_random_id);

 "min"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_random_min);
 "min"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_random_min);

 "max"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_random_max);
 "max"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_random_max);

 "mean"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_random_mean);
 "mean"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_random_mean);

 "std_deviation"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_random_std_deviation);
 "std_deviation"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_random_std_deviation);

 "generator"{Eq}"'DRAND48'" |
 "generator"{Eq}"\"DRAND48\"" A_surfxml_random_generator = A_surfxml_random_generator_DRAND48;
 "generator"{Eq}"'RAND'" |
 "generator"{Eq}"\"RAND\"" A_surfxml_random_generator = A_surfxml_random_generator_RAND;

 ">" {
  if (!AX_surfxml_random_id) FAIL("Required attribute `id' not set for `random' element.");
  if (!AX_surfxml_random_min) FAIL("Required attribute `min' not set for `random' element.");
  if (!AX_surfxml_random_max) FAIL("Required attribute `max' not set for `random' element.");
  if (!AX_surfxml_random_mean) FAIL("Required attribute `mean' not set for `random' element.");
  if (!AX_surfxml_random_std_deviation) FAIL("Required attribute `std_deviation' not set for `random' element.");
  LEAVE; STag_surfxml_random();surfxml_pcdata_ix = 0; ENTER(S_surfxml_random);
 }
 "/>" {
  if (!AX_surfxml_random_id) FAIL("Required attribute `id' not set for `random' element.");
  if (!AX_surfxml_random_min) FAIL("Required attribute `min' not set for `random' element.");
  if (!AX_surfxml_random_max) FAIL("Required attribute `max' not set for `random' element.");
  if (!AX_surfxml_random_mean) FAIL("Required attribute `mean' not set for `random' element.");
  if (!AX_surfxml_random_std_deviation) FAIL("Required attribute `std_deviation' not set for `random' element.");
  LEAVE; STag_surfxml_random(); surfxml_pcdata_ix = 0; ETag_surfxml_random(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_config: SET(E_surfxml_config); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of random element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `random' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `random' element.");
}

<S_surfxml_random_2,S_surfxml_random,E_surfxml_random>{
 "</random"{s}">" {
  LEAVE;
  ETag_surfxml_random();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_config: SET(E_surfxml_config); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</random>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</random>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</random>' expected.");
}

<S_surfxml_random,S_surfxml_ASroute_1,E_surfxml_AS,E_surfxml_process,S_surfxml_process,S_surfxml_link_2,E_surfxml_random,S_surfxml_bypassRoute_2,E_surfxml_route,S_surfxml_route_1,S_surfxml_link_1,S_surfxml_bypassRoute,S_surfxml_link,E_surfxml_host,S_surfxml_config,S_surfxml_ASroute_2,S_surfxml_random_2,S_surfxml_platform_6,S_surfxml_process_2,E_surfxml_ASroute,E_surfxml_link,S_surfxml_bypassRoute_1,E_surfxml_config,ROOT_surfxml_trace_connect,S_surfxml_host_1,S_surfxml_route_2,E_surfxml_platform,S_surfxml_config_2,S_surfxml_random_1,S_surfxml_host,S_surfxml_platform_2,S_surfxml_process_1,S_surfxml_host_2,S_surfxml_ASroute,S_surfxml_platform_5,S_surfxml_config_1,S_surfxml_route,E_surfxml_bypassRoute>"<trace_connect"{s} FAIL("Starting tag <trace_connect> is not allowed here.");

<S_surfxml_AS_12,S_surfxml_AS_1,S_surfxml_AS_9,S_surfxml_AS_11,S_surfxml_AS_2,S_surfxml_AS_5,S_surfxml_AS_10,S_surfxml_AS_13,S_surfxml_AS,S_surfxml_AS_8,S_surfxml_platform_4,S_surfxml_AS_4,S_surfxml_AS_7,S_surfxml_platform_1,S_surfxml_AS_6,S_surfxml_platform,S_surfxml_AS_3,S_surfxml_platform_3>"<trace_connect"{s} {
  AX_surfxml_trace_connect_kind = A_surfxml_trace_connect_kind_HOST_AVAIL;
  AX_surfxml_trace_connect_trace = 0;
  AX_surfxml_trace_connect_element = 0;
  ENTER(AL_surfxml_trace_connect); pushbuffer(0);
  }

<AL_surfxml_trace_connect>{
 "kind"{Eq}"'HOST_AVAIL'" |
 "kind"{Eq}"\"HOST_AVAIL\"" A_surfxml_trace_connect_kind = A_surfxml_trace_connect_kind_HOST_AVAIL;
 "kind"{Eq}"'POWER'" |
 "kind"{Eq}"\"POWER\"" A_surfxml_trace_connect_kind = A_surfxml_trace_connect_kind_POWER;
 "kind"{Eq}"'LINK_AVAIL'" |
 "kind"{Eq}"\"LINK_AVAIL\"" A_surfxml_trace_connect_kind = A_surfxml_trace_connect_kind_LINK_AVAIL;
 "kind"{Eq}"'BANDWIDTH'" |
 "kind"{Eq}"\"BANDWIDTH\"" A_surfxml_trace_connect_kind = A_surfxml_trace_connect_kind_BANDWIDTH;
 "kind"{Eq}"'LATENCY'" |
 "kind"{Eq}"\"LATENCY\"" A_surfxml_trace_connect_kind = A_surfxml_trace_connect_kind_LATENCY;

 "trace"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_trace_connect_trace);
 "trace"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_trace_connect_trace);

 "element"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_trace_connect_element);
 "element"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_trace_connect_element);

 ">" {
  if (!AX_surfxml_trace_connect_trace) FAIL("Required attribute `trace' not set for `trace_connect' element.");
  if (!AX_surfxml_trace_connect_element) FAIL("Required attribute `element' not set for `trace_connect' element.");
  LEAVE; STag_surfxml_trace_connect();surfxml_pcdata_ix = 0; ENTER(E_surfxml_trace_connect);
 }
 "/>" {
  if (!AX_surfxml_trace_connect_trace) FAIL("Required attribute `trace' not set for `trace_connect' element.");
  if (!AX_surfxml_trace_connect_element) FAIL("Required attribute `element' not set for `trace_connect' element.");
  LEAVE; STag_surfxml_trace_connect(); surfxml_pcdata_ix = 0; ETag_surfxml_trace_connect(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS_8: case S_surfxml_AS_4: case S_surfxml_AS_7: case S_surfxml_AS_6: case S_surfxml_AS_3: SET(S_surfxml_AS_8); break;
   case S_surfxml_AS_11: case S_surfxml_AS_10: case S_surfxml_AS: SET(S_surfxml_AS_11); break;
   case S_surfxml_AS_2: SET(S_surfxml_AS_3); break;
   case S_surfxml_AS_1: case S_surfxml_AS_5: SET(S_surfxml_AS_6); break;
   case S_surfxml_platform_4: case S_surfxml_platform_1: case S_surfxml_platform: case S_surfxml_platform_3: SET(S_surfxml_platform_4); break;
   case S_surfxml_AS_12: case S_surfxml_AS_9: case S_surfxml_AS_13: SET(S_surfxml_AS_13); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of trace_connect element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `trace_connect' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `trace_connect' element.");
}

<E_surfxml_trace_connect>{
 "</trace_connect"{s}">" {
  LEAVE;
  ETag_surfxml_trace_connect();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS_8: case S_surfxml_AS_4: case S_surfxml_AS_7: case S_surfxml_AS_6: case S_surfxml_AS_3: SET(S_surfxml_AS_8); break;
   case S_surfxml_AS_11: case S_surfxml_AS_10: case S_surfxml_AS: SET(S_surfxml_AS_11); break;
   case S_surfxml_AS_2: SET(S_surfxml_AS_3); break;
   case S_surfxml_AS_1: case S_surfxml_AS_5: SET(S_surfxml_AS_6); break;
   case S_surfxml_platform_4: case S_surfxml_platform_1: case S_surfxml_platform: case S_surfxml_platform_3: SET(S_surfxml_platform_4); break;
   case S_surfxml_AS_12: case S_surfxml_AS_9: case S_surfxml_AS_13: SET(S_surfxml_AS_13); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</trace_connect>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</trace_connect>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</trace_connect>' expected.");
}

<S_surfxml_AS_10,S_surfxml_random,S_surfxml_ASroute_1,E_surfxml_AS,S_surfxml_AS_12,E_surfxml_process,S_surfxml_process,S_surfxml_link_2,E_surfxml_random,S_surfxml_AS_8,S_surfxml_bypassRoute_2,E_surfxml_route,S_surfxml_AS_9,ROOT_surfxml_AS,S_surfxml_route_1,S_surfxml_AS_11,S_surfxml_link_1,S_surfxml_bypassRoute,S_surfxml_link,E_surfxml_host,S_surfxml_config,S_surfxml_ASroute_2,S_surfxml_random_2,S_surfxml_platform_6,S_surfxml_process_2,E_surfxml_ASroute,S_surfxml_AS_6,E_surfxml_link,S_surfxml_bypassRoute_1,E_surfxml_config,S_surfxml_host_1,S_surfxml_route_2,E_surfxml_platform,S_surfxml_config_2,S_surfxml_random_1,S_surfxml_AS_1,S_surfxml_host,S_surfxml_platform_2,S_surfxml_process_1,S_surfxml_host_2,S_surfxml_AS_7,S_surfxml_AS_13,S_surfxml_ASroute,S_surfxml_platform_5,S_surfxml_AS_5,S_surfxml_config_1,S_surfxml_AS_4,S_surfxml_route,E_surfxml_bypassRoute>"<AS"{s} FAIL("Starting tag <AS> is not allowed here.");

<S_surfxml_AS_2,S_surfxml_AS,S_surfxml_platform_4,S_surfxml_platform_1,S_surfxml_platform,S_surfxml_AS_3,S_surfxml_platform_3>"<AS"{s} {
  AX_surfxml_AS_id = 0;
  AX_surfxml_AS_routing = 0;
  ENTER(AL_surfxml_AS); pushbuffer(0);
  }

<AL_surfxml_AS>{
 "id"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_AS_id);
 "id"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_AS_id);

 "routing"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_AS_routing);
 "routing"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_AS_routing);

 ">" {
  if (!AX_surfxml_AS_id) FAIL("Required attribute `id' not set for `AS' element.");
  if (!AX_surfxml_AS_routing) FAIL("Required attribute `routing' not set for `AS' element.");
  LEAVE; STag_surfxml_AS();surfxml_pcdata_ix = 0; ENTER(S_surfxml_AS);
 }
 "/>" {
  if (!AX_surfxml_AS_id) FAIL("Required attribute `id' not set for `AS' element.");
  if (!AX_surfxml_AS_routing) FAIL("Required attribute `routing' not set for `AS' element.");
  LEAVE; STag_surfxml_AS(); surfxml_pcdata_ix = 0; ETag_surfxml_AS(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS_2: case S_surfxml_AS: case S_surfxml_AS_3: SET(S_surfxml_AS_3); break;
   case S_surfxml_platform_4: case S_surfxml_platform_1: case S_surfxml_platform: case S_surfxml_platform_3: SET(S_surfxml_platform_4); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of AS element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `AS' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `AS' element.");
}

<S_surfxml_AS_1,S_surfxml_AS_9,S_surfxml_AS_11,S_surfxml_AS_6,E_surfxml_AS,S_surfxml_AS_3,S_surfxml_AS_13,S_surfxml_AS_8,S_surfxml_AS,S_surfxml_AS_4>{
 "</AS"{s}">" {
  LEAVE;
  ETag_surfxml_AS();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS_2: case S_surfxml_AS: case S_surfxml_AS_3: SET(S_surfxml_AS_3); break;
   case S_surfxml_platform_4: case S_surfxml_platform_1: case S_surfxml_platform: case S_surfxml_platform_3: SET(S_surfxml_platform_4); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</AS>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</AS>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</AS>' expected.");
}

<S_surfxml_AS_3,S_surfxml_random,S_surfxml_ASroute_1,S_surfxml_AS_2,E_surfxml_AS,S_surfxml_AS_12,E_surfxml_process,S_surfxml_process,S_surfxml_link_2,E_surfxml_random,S_surfxml_AS_8,S_surfxml_bypassRoute_2,E_surfxml_route,S_surfxml_AS_9,S_surfxml_platform_3,S_surfxml_route_1,S_surfxml_link_1,S_surfxml_bypassRoute,S_surfxml_link,E_surfxml_host,S_surfxml_config,S_surfxml_ASroute_2,S_surfxml_random_2,S_surfxml_platform_6,S_surfxml_process_2,E_surfxml_ASroute,S_surfxml_AS_6,E_surfxml_link,S_surfxml_platform,S_surfxml_platform_1,S_surfxml_bypassRoute_1,E_surfxml_config,S_surfxml_host_1,S_surfxml_route_2,E_surfxml_platform,S_surfxml_config_2,S_surfxml_random_1,S_surfxml_platform_4,S_surfxml_AS_1,S_surfxml_host,S_surfxml_platform_2,S_surfxml_process_1,S_surfxml_host_2,S_surfxml_AS_7,S_surfxml_AS_13,ROOT_surfxml_host,S_surfxml_ASroute,S_surfxml_platform_5,S_surfxml_AS_5,S_surfxml_config_1,S_surfxml_AS_4,S_surfxml_route,E_surfxml_bypassRoute>"<host"{s} FAIL("Starting tag <host> is not allowed here.");

<S_surfxml_AS_11,S_surfxml_AS_10,S_surfxml_AS>"<host"{s} {
  AX_surfxml_host_id = 0;
  AX_surfxml_host_power = 0;
  AX_surfxml_host_availability = 5;
  AX_surfxml_host_availability_file = 0;
  AX_surfxml_host_state = A_surfxml_host_state_ON;
  AX_surfxml_host_state_file = 0;
  AX_surfxml_host_vivaldi = 9;
  ENTER(AL_surfxml_host); pushbuffer(0);
  }

<AL_surfxml_host>{
 "id"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_host_id);
 "id"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_host_id);

 "power"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_host_power);
 "power"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_host_power);

 "availability"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_host_availability);
 "availability"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_host_availability);

 "availability_file"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_host_availability_file);
 "availability_file"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_host_availability_file);

 "state"{Eq}"'ON'" |
 "state"{Eq}"\"ON\"" A_surfxml_host_state = A_surfxml_host_state_ON;
 "state"{Eq}"'OFF'" |
 "state"{Eq}"\"OFF\"" A_surfxml_host_state = A_surfxml_host_state_OFF;

 "state_file"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_host_state_file);
 "state_file"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_host_state_file);

 "vivaldi"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_host_vivaldi);
 "vivaldi"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_host_vivaldi);

 ">" {
  if (!AX_surfxml_host_id) FAIL("Required attribute `id' not set for `host' element.");
  if (!AX_surfxml_host_power) FAIL("Required attribute `power' not set for `host' element.");
  LEAVE; STag_surfxml_host();surfxml_pcdata_ix = 0; ENTER(S_surfxml_host);
 }
 "/>" {
  if (!AX_surfxml_host_id) FAIL("Required attribute `id' not set for `host' element.");
  if (!AX_surfxml_host_power) FAIL("Required attribute `power' not set for `host' element.");
  LEAVE; STag_surfxml_host(); surfxml_pcdata_ix = 0; ETag_surfxml_host(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS_11: case S_surfxml_AS_10: case S_surfxml_AS: SET(S_surfxml_AS_11); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of host element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `host' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `host' element.");
}

<S_surfxml_host,E_surfxml_host,S_surfxml_host_2>{
 "</host"{s}">" {
  LEAVE;
  ETag_surfxml_host();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS_11: case S_surfxml_AS_10: case S_surfxml_AS: SET(S_surfxml_AS_11); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</host>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</host>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</host>' expected.");
}

<S_surfxml_AS_10,S_surfxml_random,S_surfxml_ASroute_1,E_surfxml_AS,S_surfxml_AS_12,E_surfxml_process,S_surfxml_process,S_surfxml_link_2,E_surfxml_random,S_surfxml_AS_8,S_surfxml_bypassRoute_2,E_surfxml_route,S_surfxml_AS_9,S_surfxml_route_1,S_surfxml_AS_11,S_surfxml_link_1,S_surfxml_bypassRoute,S_surfxml_link,E_surfxml_host,S_surfxml_config,S_surfxml_ASroute_2,S_surfxml_random_2,S_surfxml_platform_6,S_surfxml_process_2,E_surfxml_ASroute,S_surfxml_AS_6,E_surfxml_link,S_surfxml_bypassRoute_1,E_surfxml_config,S_surfxml_host_1,S_surfxml_route_2,E_surfxml_platform,S_surfxml_config_2,ROOT_surfxml_cluster,S_surfxml_random_1,S_surfxml_AS_1,S_surfxml_host,S_surfxml_platform_2,S_surfxml_process_1,S_surfxml_host_2,S_surfxml_AS_7,S_surfxml_AS_13,S_surfxml_ASroute,S_surfxml_platform_5,S_surfxml_AS_5,S_surfxml_config_1,S_surfxml_AS_4,S_surfxml_route,E_surfxml_bypassRoute>"<cluster"{s} FAIL("Starting tag <cluster> is not allowed here.");

<S_surfxml_AS_2,S_surfxml_AS,S_surfxml_platform_4,S_surfxml_platform_1,S_surfxml_platform,S_surfxml_AS_3,S_surfxml_platform_3>"<cluster"{s} {
  AX_surfxml_cluster_id = 0;
  AX_surfxml_cluster_prefix = 0;
  AX_surfxml_cluster_suffix = 0;
  AX_surfxml_cluster_radical = 0;
  AX_surfxml_cluster_power = 0;
  AX_surfxml_cluster_bw = 0;
  AX_surfxml_cluster_lat = 0;
  AX_surfxml_cluster_bb_bw = 0;
  AX_surfxml_cluster_bb_lat = 0;
  ENTER(AL_surfxml_cluster); pushbuffer(0);
  }

<AL_surfxml_cluster>{
 "id"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_cluster_id);
 "id"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_cluster_id);

 "prefix"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_cluster_prefix);
 "prefix"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_cluster_prefix);

 "suffix"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_cluster_suffix);
 "suffix"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_cluster_suffix);

 "radical"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_cluster_radical);
 "radical"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_cluster_radical);

 "power"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_cluster_power);
 "power"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_cluster_power);

 "bw"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_cluster_bw);
 "bw"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_cluster_bw);

 "lat"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_cluster_lat);
 "lat"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_cluster_lat);

 "bb_bw"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_cluster_bb_bw);
 "bb_bw"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_cluster_bb_bw);

 "bb_lat"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_cluster_bb_lat);
 "bb_lat"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_cluster_bb_lat);

 ">" {
  if (!AX_surfxml_cluster_id) FAIL("Required attribute `id' not set for `cluster' element.");
  if (!AX_surfxml_cluster_prefix) FAIL("Required attribute `prefix' not set for `cluster' element.");
  if (!AX_surfxml_cluster_suffix) FAIL("Required attribute `suffix' not set for `cluster' element.");
  if (!AX_surfxml_cluster_radical) FAIL("Required attribute `radical' not set for `cluster' element.");
  if (!AX_surfxml_cluster_power) FAIL("Required attribute `power' not set for `cluster' element.");
  if (!AX_surfxml_cluster_bw) FAIL("Required attribute `bw' not set for `cluster' element.");
  if (!AX_surfxml_cluster_lat) FAIL("Required attribute `lat' not set for `cluster' element.");
  if (!AX_surfxml_cluster_bb_bw) FAIL("Required attribute `bb_bw' not set for `cluster' element.");
  if (!AX_surfxml_cluster_bb_lat) FAIL("Required attribute `bb_lat' not set for `cluster' element.");
  LEAVE; STag_surfxml_cluster();surfxml_pcdata_ix = 0; ENTER(E_surfxml_cluster);
 }
 "/>" {
  if (!AX_surfxml_cluster_id) FAIL("Required attribute `id' not set for `cluster' element.");
  if (!AX_surfxml_cluster_prefix) FAIL("Required attribute `prefix' not set for `cluster' element.");
  if (!AX_surfxml_cluster_suffix) FAIL("Required attribute `suffix' not set for `cluster' element.");
  if (!AX_surfxml_cluster_radical) FAIL("Required attribute `radical' not set for `cluster' element.");
  if (!AX_surfxml_cluster_power) FAIL("Required attribute `power' not set for `cluster' element.");
  if (!AX_surfxml_cluster_bw) FAIL("Required attribute `bw' not set for `cluster' element.");
  if (!AX_surfxml_cluster_lat) FAIL("Required attribute `lat' not set for `cluster' element.");
  if (!AX_surfxml_cluster_bb_bw) FAIL("Required attribute `bb_bw' not set for `cluster' element.");
  if (!AX_surfxml_cluster_bb_lat) FAIL("Required attribute `bb_lat' not set for `cluster' element.");
  LEAVE; STag_surfxml_cluster(); surfxml_pcdata_ix = 0; ETag_surfxml_cluster(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS_2: case S_surfxml_AS: case S_surfxml_AS_3: SET(S_surfxml_AS_3); break;
   case S_surfxml_platform_4: case S_surfxml_platform_1: case S_surfxml_platform: case S_surfxml_platform_3: SET(S_surfxml_platform_4); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of cluster element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `cluster' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `cluster' element.");
}

<E_surfxml_cluster>{
 "</cluster"{s}">" {
  LEAVE;
  ETag_surfxml_cluster();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS_2: case S_surfxml_AS: case S_surfxml_AS_3: SET(S_surfxml_AS_3); break;
   case S_surfxml_platform_4: case S_surfxml_platform_1: case S_surfxml_platform: case S_surfxml_platform_3: SET(S_surfxml_platform_4); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</cluster>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</cluster>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</cluster>' expected.");
}

<S_surfxml_AS_3,S_surfxml_random,S_surfxml_ASroute_1,S_surfxml_AS_2,E_surfxml_AS,S_surfxml_AS_12,E_surfxml_process,S_surfxml_process,S_surfxml_link_2,E_surfxml_random,S_surfxml_AS_8,S_surfxml_bypassRoute_2,E_surfxml_route,S_surfxml_AS_9,S_surfxml_platform_3,S_surfxml_route_1,S_surfxml_link_1,S_surfxml_bypassRoute,S_surfxml_link,E_surfxml_host,S_surfxml_config,S_surfxml_ASroute_2,S_surfxml_random_2,S_surfxml_platform_6,S_surfxml_process_2,E_surfxml_ASroute,S_surfxml_AS_6,E_surfxml_link,S_surfxml_platform,S_surfxml_platform_1,S_surfxml_bypassRoute_1,E_surfxml_config,S_surfxml_host_1,S_surfxml_route_2,E_surfxml_platform,S_surfxml_config_2,S_surfxml_random_1,S_surfxml_platform_4,S_surfxml_AS_1,S_surfxml_host,S_surfxml_platform_2,S_surfxml_process_1,S_surfxml_host_2,S_surfxml_AS_7,S_surfxml_AS_13,S_surfxml_ASroute,S_surfxml_platform_5,S_surfxml_AS_5,S_surfxml_config_1,S_surfxml_AS_4,S_surfxml_route,ROOT_surfxml_router,E_surfxml_bypassRoute>"<router"{s} FAIL("Starting tag <router> is not allowed here.");

<S_surfxml_AS_11,S_surfxml_AS_10,S_surfxml_AS>"<router"{s} {
  AX_surfxml_router_id = 0;
  ENTER(AL_surfxml_router); pushbuffer(0);
  }

<AL_surfxml_router>{
 "id"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_router_id);
 "id"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_router_id);

 ">" {
  if (!AX_surfxml_router_id) FAIL("Required attribute `id' not set for `router' element.");
  LEAVE; STag_surfxml_router();surfxml_pcdata_ix = 0; ENTER(E_surfxml_router);
 }
 "/>" {
  if (!AX_surfxml_router_id) FAIL("Required attribute `id' not set for `router' element.");
  LEAVE; STag_surfxml_router(); surfxml_pcdata_ix = 0; ETag_surfxml_router(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS_11: case S_surfxml_AS_10: case S_surfxml_AS: SET(S_surfxml_AS_11); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of router element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `router' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `router' element.");
}

<E_surfxml_router>{
 "</router"{s}">" {
  LEAVE;
  ETag_surfxml_router();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS_11: case S_surfxml_AS_10: case S_surfxml_AS: SET(S_surfxml_AS_11); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</router>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</router>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</router>' expected.");
}

<S_surfxml_random,S_surfxml_ASroute_1,E_surfxml_AS,S_surfxml_AS_12,E_surfxml_process,S_surfxml_process,S_surfxml_link_2,E_surfxml_random,S_surfxml_AS_8,S_surfxml_bypassRoute_2,E_surfxml_route,S_surfxml_AS_9,S_surfxml_platform_3,S_surfxml_route_1,S_surfxml_link_1,S_surfxml_bypassRoute,S_surfxml_link,E_surfxml_host,S_surfxml_config,S_surfxml_ASroute_2,S_surfxml_random_2,S_surfxml_platform_6,S_surfxml_process_2,E_surfxml_ASroute,S_surfxml_AS_6,E_surfxml_link,S_surfxml_platform,S_surfxml_platform_1,S_surfxml_bypassRoute_1,E_surfxml_config,S_surfxml_host_1,S_surfxml_route_2,E_surfxml_platform,S_surfxml_config_2,S_surfxml_random_1,S_surfxml_platform_4,S_surfxml_AS_1,S_surfxml_host,S_surfxml_platform_2,ROOT_surfxml_link,S_surfxml_process_1,S_surfxml_host_2,S_surfxml_AS_7,S_surfxml_AS_13,S_surfxml_ASroute,S_surfxml_platform_5,S_surfxml_AS_5,S_surfxml_config_1,S_surfxml_AS_4,S_surfxml_route,E_surfxml_bypassRoute>"<link"{s} FAIL("Starting tag <link> is not allowed here.");

<S_surfxml_AS_11,S_surfxml_AS_2,S_surfxml_AS_10,S_surfxml_AS,S_surfxml_AS_3>"<link"{s} {
  AX_surfxml_link_id = 0;
  AX_surfxml_link_bandwidth = 0;
  AX_surfxml_link_bandwidth_file = 0;
  AX_surfxml_link_latency = 15;
  AX_surfxml_link_latency_file = 0;
  AX_surfxml_link_state = A_surfxml_link_state_ON;
  AX_surfxml_link_state_file = 0;
  AX_surfxml_link_sharing_policy = A_surfxml_link_sharing_policy_SHARED;
  ENTER(AL_surfxml_link); pushbuffer(0);
  }

<AL_surfxml_link>{
 "id"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_link_id);
 "id"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_link_id);

 "bandwidth"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_link_bandwidth);
 "bandwidth"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_link_bandwidth);

 "bandwidth_file"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_link_bandwidth_file);
 "bandwidth_file"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_link_bandwidth_file);

 "latency"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_link_latency);
 "latency"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_link_latency);

 "latency_file"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_link_latency_file);
 "latency_file"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_link_latency_file);

 "state"{Eq}"'ON'" |
 "state"{Eq}"\"ON\"" A_surfxml_link_state = A_surfxml_link_state_ON;
 "state"{Eq}"'OFF'" |
 "state"{Eq}"\"OFF\"" A_surfxml_link_state = A_surfxml_link_state_OFF;

 "state_file"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_link_state_file);
 "state_file"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_link_state_file);

 "sharing_policy"{Eq}"'SHARED'" |
 "sharing_policy"{Eq}"\"SHARED\"" A_surfxml_link_sharing_policy = A_surfxml_link_sharing_policy_SHARED;
 "sharing_policy"{Eq}"'FATPIPE'" |
 "sharing_policy"{Eq}"\"FATPIPE\"" A_surfxml_link_sharing_policy = A_surfxml_link_sharing_policy_FATPIPE;

 ">" {
  if (!AX_surfxml_link_id) FAIL("Required attribute `id' not set for `link' element.");
  if (!AX_surfxml_link_bandwidth) FAIL("Required attribute `bandwidth' not set for `link' element.");
  LEAVE; STag_surfxml_link();surfxml_pcdata_ix = 0; ENTER(S_surfxml_link);
 }
 "/>" {
  if (!AX_surfxml_link_id) FAIL("Required attribute `id' not set for `link' element.");
  if (!AX_surfxml_link_bandwidth) FAIL("Required attribute `bandwidth' not set for `link' element.");
  LEAVE; STag_surfxml_link(); surfxml_pcdata_ix = 0; ETag_surfxml_link(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS_11: case S_surfxml_AS_10: case S_surfxml_AS: SET(S_surfxml_AS_11); break;
   case S_surfxml_AS_2: case S_surfxml_AS_3: SET(S_surfxml_AS_3); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of link element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `link' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `link' element.");
}

<E_surfxml_link,S_surfxml_link_2,S_surfxml_link>{
 "</link"{s}">" {
  LEAVE;
  ETag_surfxml_link();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS_11: case S_surfxml_AS_10: case S_surfxml_AS: SET(S_surfxml_AS_11); break;
   case S_surfxml_AS_2: case S_surfxml_AS_3: SET(S_surfxml_AS_3); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</link>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</link>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</link>' expected.");
}

<S_surfxml_AS_10,S_surfxml_AS_3,S_surfxml_random,S_surfxml_ASroute_1,S_surfxml_AS_2,E_surfxml_AS,E_surfxml_process,S_surfxml_process,S_surfxml_link_2,E_surfxml_random,S_surfxml_AS_8,S_surfxml_bypassRoute_2,E_surfxml_route,S_surfxml_platform_3,S_surfxml_route_1,S_surfxml_link_1,ROOT_surfxml_route,S_surfxml_bypassRoute,S_surfxml_link,E_surfxml_host,S_surfxml_config,S_surfxml_ASroute_2,S_surfxml_random_2,S_surfxml_platform_6,S_surfxml_process_2,E_surfxml_ASroute,S_surfxml_AS_6,E_surfxml_link,S_surfxml_platform,S_surfxml_platform_1,S_surfxml_bypassRoute_1,E_surfxml_config,S_surfxml_host_1,S_surfxml_route_2,E_surfxml_platform,S_surfxml_config_2,S_surfxml_random_1,S_surfxml_platform_4,S_surfxml_AS_1,S_surfxml_host,S_surfxml_platform_2,S_surfxml_process_1,S_surfxml_host_2,S_surfxml_AS_7,S_surfxml_ASroute,S_surfxml_platform_5,S_surfxml_AS_5,S_surfxml_config_1,S_surfxml_AS_4,S_surfxml_route,E_surfxml_bypassRoute>"<route"{s} FAIL("Starting tag <route> is not allowed here.");

<S_surfxml_AS_12,S_surfxml_AS_9,S_surfxml_AS_11,S_surfxml_AS_13,S_surfxml_AS>"<route"{s} {
  AX_surfxml_route_src = 0;
  AX_surfxml_route_dst = 0;
  ENTER(AL_surfxml_route); pushbuffer(0);
  }

<AL_surfxml_route>{
 "src"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_route_src);
 "src"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_route_src);

 "dst"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_route_dst);
 "dst"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_route_dst);

 ">" {
  if (!AX_surfxml_route_src) FAIL("Required attribute `src' not set for `route' element.");
  if (!AX_surfxml_route_dst) FAIL("Required attribute `dst' not set for `route' element.");
  LEAVE; STag_surfxml_route();surfxml_pcdata_ix = 0; ENTER(S_surfxml_route);
 }
 "/>" {
  if (!AX_surfxml_route_src) FAIL("Required attribute `src' not set for `route' element.");
  if (!AX_surfxml_route_dst) FAIL("Required attribute `dst' not set for `route' element.");
  LEAVE; STag_surfxml_route(); surfxml_pcdata_ix = 0; ETag_surfxml_route(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS_12: case S_surfxml_AS_9: case S_surfxml_AS_11: case S_surfxml_AS_13: case S_surfxml_AS: SET(S_surfxml_AS_13); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of route element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `route' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `route' element.");
}

<S_surfxml_route,S_surfxml_route_2,E_surfxml_route>{
 "</route"{s}">" {
  LEAVE;
  ETag_surfxml_route();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS_12: case S_surfxml_AS_9: case S_surfxml_AS_11: case S_surfxml_AS_13: case S_surfxml_AS: SET(S_surfxml_AS_13); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</route>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</route>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</route>' expected.");
}

<S_surfxml_AS_10,ROOT_surfxml_ASroute,S_surfxml_random,S_surfxml_ASroute_1,S_surfxml_AS_2,E_surfxml_AS,S_surfxml_AS_12,E_surfxml_process,S_surfxml_process,S_surfxml_link_2,E_surfxml_random,S_surfxml_AS_8,S_surfxml_bypassRoute_2,E_surfxml_route,S_surfxml_AS_9,S_surfxml_platform_3,S_surfxml_route_1,S_surfxml_AS_11,S_surfxml_link_1,S_surfxml_bypassRoute,S_surfxml_link,E_surfxml_host,S_surfxml_config,S_surfxml_ASroute_2,S_surfxml_random_2,S_surfxml_platform_6,S_surfxml_process_2,E_surfxml_ASroute,E_surfxml_link,S_surfxml_platform,S_surfxml_platform_1,S_surfxml_bypassRoute_1,E_surfxml_config,S_surfxml_host_1,S_surfxml_route_2,E_surfxml_platform,S_surfxml_config_2,S_surfxml_random_1,S_surfxml_platform_4,S_surfxml_host,S_surfxml_platform_2,S_surfxml_process_1,S_surfxml_host_2,S_surfxml_AS_7,S_surfxml_AS_13,S_surfxml_ASroute,S_surfxml_platform_5,S_surfxml_config_1,S_surfxml_AS_4,S_surfxml_route,E_surfxml_bypassRoute>"<ASroute"{s} FAIL("Starting tag <ASroute> is not allowed here.");

<S_surfxml_AS_1,S_surfxml_AS_5,S_surfxml_AS,S_surfxml_AS_6,S_surfxml_AS_3>"<ASroute"{s} {
  AX_surfxml_ASroute_src = 0;
  AX_surfxml_ASroute_dst = 0;
  AX_surfxml_ASroute_gw_src = 0;
  AX_surfxml_ASroute_gw_dst = 0;
  ENTER(AL_surfxml_ASroute); pushbuffer(0);
  }

<AL_surfxml_ASroute>{
 "src"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_ASroute_src);
 "src"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_ASroute_src);

 "dst"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_ASroute_dst);
 "dst"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_ASroute_dst);

 "gw_src"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_ASroute_gw_src);
 "gw_src"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_ASroute_gw_src);

 "gw_dst"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_ASroute_gw_dst);
 "gw_dst"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_ASroute_gw_dst);

 ">" {
  if (!AX_surfxml_ASroute_src) FAIL("Required attribute `src' not set for `ASroute' element.");
  if (!AX_surfxml_ASroute_dst) FAIL("Required attribute `dst' not set for `ASroute' element.");
  if (!AX_surfxml_ASroute_gw_src) FAIL("Required attribute `gw_src' not set for `ASroute' element.");
  if (!AX_surfxml_ASroute_gw_dst) FAIL("Required attribute `gw_dst' not set for `ASroute' element.");
  LEAVE; STag_surfxml_ASroute();surfxml_pcdata_ix = 0; ENTER(S_surfxml_ASroute);
 }
 "/>" {
  if (!AX_surfxml_ASroute_src) FAIL("Required attribute `src' not set for `ASroute' element.");
  if (!AX_surfxml_ASroute_dst) FAIL("Required attribute `dst' not set for `ASroute' element.");
  if (!AX_surfxml_ASroute_gw_src) FAIL("Required attribute `gw_src' not set for `ASroute' element.");
  if (!AX_surfxml_ASroute_gw_dst) FAIL("Required attribute `gw_dst' not set for `ASroute' element.");
  LEAVE; STag_surfxml_ASroute(); surfxml_pcdata_ix = 0; ETag_surfxml_ASroute(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS_1: case S_surfxml_AS_5: case S_surfxml_AS: case S_surfxml_AS_6: case S_surfxml_AS_3: SET(S_surfxml_AS_6); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of ASroute element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `ASroute' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `ASroute' element.");
}

<E_surfxml_ASroute,S_surfxml_ASroute,S_surfxml_ASroute_2>{
 "</ASroute"{s}">" {
  LEAVE;
  ETag_surfxml_ASroute();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS_1: case S_surfxml_AS_5: case S_surfxml_AS: case S_surfxml_AS_6: case S_surfxml_AS_3: SET(S_surfxml_AS_6); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</ASroute>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</ASroute>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</ASroute>' expected.");
}

<S_surfxml_AS_10,S_surfxml_AS_3,S_surfxml_random,S_surfxml_AS_2,E_surfxml_AS,S_surfxml_AS_12,E_surfxml_process,S_surfxml_process,S_surfxml_link_2,E_surfxml_random,S_surfxml_AS_8,E_surfxml_route,S_surfxml_AS_9,S_surfxml_platform_3,S_surfxml_AS_11,S_surfxml_link_1,S_surfxml_AS,S_surfxml_link,E_surfxml_host,S_surfxml_config,ROOT_surfxml_link_ctn,S_surfxml_random_2,S_surfxml_platform_6,S_surfxml_process_2,E_surfxml_ASroute,S_surfxml_AS_6,E_surfxml_link,S_surfxml_platform,S_surfxml_platform_1,E_surfxml_config,S_surfxml_host_1,E_surfxml_platform,S_surfxml_config_2,S_surfxml_random_1,S_surfxml_platform_4,S_surfxml_AS_1,S_surfxml_host,S_surfxml_platform_2,S_surfxml_process_1,S_surfxml_host_2,S_surfxml_AS_7,S_surfxml_AS_13,S_surfxml_platform_5,S_surfxml_AS_5,S_surfxml_config_1,S_surfxml_AS_4,E_surfxml_bypassRoute>"<link_ctn"{s} FAIL("Starting tag <link_ctn> is not allowed here.");

<S_surfxml_route_1,S_surfxml_bypassRoute,S_surfxml_route,S_surfxml_bypassRoute_2,S_surfxml_bypassRoute_1,S_surfxml_route_2,S_surfxml_ASroute,S_surfxml_ASroute_1,S_surfxml_ASroute_2>"<link_ctn"{s} {
  AX_surfxml_link_ctn_id = 0;
  ENTER(AL_surfxml_link_ctn); pushbuffer(0);
  }

<AL_surfxml_link_ctn>{
 "id"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_link_ctn_id);
 "id"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_link_ctn_id);

 ">" {
  if (!AX_surfxml_link_ctn_id) FAIL("Required attribute `id' not set for `link_ctn' element.");
  LEAVE; STag_surfxml_link_ctn();surfxml_pcdata_ix = 0; ENTER(E_surfxml_link_ctn);
 }
 "/>" {
  if (!AX_surfxml_link_ctn_id) FAIL("Required attribute `id' not set for `link_ctn' element.");
  LEAVE; STag_surfxml_link_ctn(); surfxml_pcdata_ix = 0; ETag_surfxml_link_ctn(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_bypassRoute: case S_surfxml_bypassRoute_2: case S_surfxml_bypassRoute_1: SET(S_surfxml_bypassRoute_2); break;
   case S_surfxml_route_1: case S_surfxml_route: case S_surfxml_route_2: SET(S_surfxml_route_2); break;
   case S_surfxml_ASroute: case S_surfxml_ASroute_1: case S_surfxml_ASroute_2: SET(S_surfxml_ASroute_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of link_ctn element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `link_ctn' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `link_ctn' element.");
}

<E_surfxml_link_ctn>{
 "</link_ctn"{s}">" {
  LEAVE;
  ETag_surfxml_link_ctn();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_bypassRoute: case S_surfxml_bypassRoute_2: case S_surfxml_bypassRoute_1: SET(S_surfxml_bypassRoute_2); break;
   case S_surfxml_route_1: case S_surfxml_route: case S_surfxml_route_2: SET(S_surfxml_route_2); break;
   case S_surfxml_ASroute: case S_surfxml_ASroute_1: case S_surfxml_ASroute_2: SET(S_surfxml_ASroute_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</link_ctn>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</link_ctn>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</link_ctn>' expected.");
}

<S_surfxml_AS_10,S_surfxml_random,S_surfxml_ASroute_1,S_surfxml_AS_2,E_surfxml_AS,S_surfxml_AS_12,E_surfxml_process,S_surfxml_process,S_surfxml_link_2,E_surfxml_random,S_surfxml_bypassRoute_2,E_surfxml_route,S_surfxml_AS_9,S_surfxml_platform_3,S_surfxml_route_1,S_surfxml_AS_11,S_surfxml_link_1,S_surfxml_bypassRoute,S_surfxml_link,E_surfxml_host,S_surfxml_config,ROOT_surfxml_bypassRoute,S_surfxml_ASroute_2,S_surfxml_random_2,S_surfxml_platform_6,S_surfxml_process_2,E_surfxml_ASroute,E_surfxml_link,S_surfxml_platform,S_surfxml_platform_1,S_surfxml_bypassRoute_1,E_surfxml_config,S_surfxml_host_1,S_surfxml_route_2,E_surfxml_platform,S_surfxml_config_2,S_surfxml_random_1,S_surfxml_platform_4,S_surfxml_host,S_surfxml_platform_2,S_surfxml_process_1,S_surfxml_host_2,S_surfxml_AS_13,S_surfxml_ASroute,S_surfxml_platform_5,S_surfxml_AS_5,S_surfxml_config_1,S_surfxml_route,E_surfxml_bypassRoute>"<bypassRoute"{s} FAIL("Starting tag <bypassRoute> is not allowed here.");

<S_surfxml_AS_1,S_surfxml_AS,S_surfxml_AS_8,S_surfxml_AS_4,S_surfxml_AS_7,S_surfxml_AS_6,S_surfxml_AS_3>"<bypassRoute"{s} {
  AX_surfxml_bypassRoute_src = 0;
  AX_surfxml_bypassRoute_dst = 0;
  AX_surfxml_bypassRoute_gw_src = 0;
  AX_surfxml_bypassRoute_gw_dst = 0;
  ENTER(AL_surfxml_bypassRoute); pushbuffer(0);
  }

<AL_surfxml_bypassRoute>{
 "src"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_bypassRoute_src);
 "src"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_bypassRoute_src);

 "dst"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_bypassRoute_dst);
 "dst"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_bypassRoute_dst);

 "gw_src"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_bypassRoute_gw_src);
 "gw_src"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_bypassRoute_gw_src);

 "gw_dst"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_bypassRoute_gw_dst);
 "gw_dst"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_bypassRoute_gw_dst);

 ">" {
  if (!AX_surfxml_bypassRoute_src) FAIL("Required attribute `src' not set for `bypassRoute' element.");
  if (!AX_surfxml_bypassRoute_dst) FAIL("Required attribute `dst' not set for `bypassRoute' element.");
  if (!AX_surfxml_bypassRoute_gw_src) FAIL("Required attribute `gw_src' not set for `bypassRoute' element.");
  if (!AX_surfxml_bypassRoute_gw_dst) FAIL("Required attribute `gw_dst' not set for `bypassRoute' element.");
  LEAVE; STag_surfxml_bypassRoute();surfxml_pcdata_ix = 0; ENTER(S_surfxml_bypassRoute);
 }
 "/>" {
  if (!AX_surfxml_bypassRoute_src) FAIL("Required attribute `src' not set for `bypassRoute' element.");
  if (!AX_surfxml_bypassRoute_dst) FAIL("Required attribute `dst' not set for `bypassRoute' element.");
  if (!AX_surfxml_bypassRoute_gw_src) FAIL("Required attribute `gw_src' not set for `bypassRoute' element.");
  if (!AX_surfxml_bypassRoute_gw_dst) FAIL("Required attribute `gw_dst' not set for `bypassRoute' element.");
  LEAVE; STag_surfxml_bypassRoute(); surfxml_pcdata_ix = 0; ETag_surfxml_bypassRoute(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS_1: case S_surfxml_AS: case S_surfxml_AS_8: case S_surfxml_AS_4: case S_surfxml_AS_7: case S_surfxml_AS_6: case S_surfxml_AS_3: SET(S_surfxml_AS_8); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of bypassRoute element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `bypassRoute' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `bypassRoute' element.");
}

<S_surfxml_bypassRoute,S_surfxml_bypassRoute_2,E_surfxml_bypassRoute>{
 "</bypassRoute"{s}">" {
  LEAVE;
  ETag_surfxml_bypassRoute();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS_1: case S_surfxml_AS: case S_surfxml_AS_8: case S_surfxml_AS_4: case S_surfxml_AS_7: case S_surfxml_AS_6: case S_surfxml_AS_3: SET(S_surfxml_AS_8); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</bypassRoute>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</bypassRoute>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</bypassRoute>' expected.");
}

<S_surfxml_AS_10,S_surfxml_AS_3,S_surfxml_random,S_surfxml_ASroute_1,S_surfxml_AS_2,E_surfxml_AS,S_surfxml_AS_12,E_surfxml_process,S_surfxml_process,S_surfxml_link_2,E_surfxml_random,S_surfxml_AS_8,S_surfxml_bypassRoute_2,E_surfxml_route,S_surfxml_AS_9,S_surfxml_platform_3,S_surfxml_route_1,S_surfxml_AS_11,S_surfxml_link_1,S_surfxml_AS,S_surfxml_bypassRoute,S_surfxml_link,E_surfxml_host,S_surfxml_config,S_surfxml_ASroute_2,S_surfxml_random_2,S_surfxml_process_2,E_surfxml_ASroute,ROOT_surfxml_process,S_surfxml_AS_6,E_surfxml_link,S_surfxml_bypassRoute_1,E_surfxml_config,S_surfxml_host_1,S_surfxml_route_2,E_surfxml_platform,S_surfxml_config_2,S_surfxml_random_1,S_surfxml_AS_1,S_surfxml_host,S_surfxml_process_1,S_surfxml_host_2,S_surfxml_AS_7,S_surfxml_AS_13,S_surfxml_ASroute,S_surfxml_AS_5,S_surfxml_config_1,S_surfxml_AS_4,S_surfxml_route,E_surfxml_bypassRoute>"<process"{s} FAIL("Starting tag <process> is not allowed here.");

<S_surfxml_platform_6,S_surfxml_platform_4,S_surfxml_platform_5,S_surfxml_platform_2,S_surfxml_platform_1,S_surfxml_platform>"<process"{s} {
  AX_surfxml_process_host = 0;
  AX_surfxml_process_function = 0;
  AX_surfxml_process_start_time = 19;
  AX_surfxml_process_kill_time = 24;
  ENTER(AL_surfxml_process); pushbuffer(0);
  }

<AL_surfxml_process>{
 "host"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_process_host);
 "host"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_process_host);

 "function"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_process_function);
 "function"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_process_function);

 "start_time"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_process_start_time);
 "start_time"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_process_start_time);

 "kill_time"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_process_kill_time);
 "kill_time"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_process_kill_time);

 ">" {
  if (!AX_surfxml_process_host) FAIL("Required attribute `host' not set for `process' element.");
  if (!AX_surfxml_process_function) FAIL("Required attribute `function' not set for `process' element.");
  LEAVE; STag_surfxml_process();surfxml_pcdata_ix = 0; ENTER(S_surfxml_process);
 }
 "/>" {
  if (!AX_surfxml_process_host) FAIL("Required attribute `host' not set for `process' element.");
  if (!AX_surfxml_process_function) FAIL("Required attribute `function' not set for `process' element.");
  LEAVE; STag_surfxml_process(); surfxml_pcdata_ix = 0; ETag_surfxml_process(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_platform_6: case S_surfxml_platform_4: case S_surfxml_platform_5: case S_surfxml_platform_2: case S_surfxml_platform_1: case S_surfxml_platform: SET(S_surfxml_platform_6); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of process element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `process' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `process' element.");
}

<E_surfxml_process,S_surfxml_process,S_surfxml_process_2>{
 "</process"{s}">" {
  LEAVE;
  ETag_surfxml_process();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_platform_6: case S_surfxml_platform_4: case S_surfxml_platform_5: case S_surfxml_platform_2: case S_surfxml_platform_1: case S_surfxml_platform: SET(S_surfxml_platform_6); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</process>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</process>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</process>' expected.");
}

<S_surfxml_AS_10,S_surfxml_AS_3,S_surfxml_random,S_surfxml_ASroute_1,S_surfxml_AS_2,E_surfxml_AS,S_surfxml_AS_12,ROOT_surfxml_argument,E_surfxml_process,S_surfxml_link_2,E_surfxml_random,S_surfxml_AS_8,S_surfxml_bypassRoute_2,E_surfxml_route,S_surfxml_AS_9,S_surfxml_platform_3,S_surfxml_route_1,S_surfxml_AS_11,S_surfxml_link_1,S_surfxml_AS,S_surfxml_bypassRoute,S_surfxml_link,E_surfxml_host,S_surfxml_config,S_surfxml_ASroute_2,S_surfxml_random_2,S_surfxml_platform_6,E_surfxml_ASroute,S_surfxml_AS_6,E_surfxml_link,S_surfxml_platform,S_surfxml_platform_1,S_surfxml_bypassRoute_1,E_surfxml_config,S_surfxml_host_1,S_surfxml_route_2,E_surfxml_platform,S_surfxml_config_2,S_surfxml_random_1,S_surfxml_platform_4,S_surfxml_AS_1,S_surfxml_host,S_surfxml_platform_2,S_surfxml_host_2,S_surfxml_AS_7,S_surfxml_AS_13,S_surfxml_ASroute,S_surfxml_platform_5,S_surfxml_AS_5,S_surfxml_config_1,S_surfxml_AS_4,S_surfxml_route,E_surfxml_bypassRoute>"<argument"{s} FAIL("Starting tag <argument> is not allowed here.");

<S_surfxml_process_1,S_surfxml_process,S_surfxml_process_2>"<argument"{s} {
  AX_surfxml_argument_value = 0;
  ENTER(AL_surfxml_argument); pushbuffer(0);
  }

<AL_surfxml_argument>{
 "value"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_argument_value);
 "value"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_argument_value);

 ">" {
  if (!AX_surfxml_argument_value) FAIL("Required attribute `value' not set for `argument' element.");
  LEAVE; STag_surfxml_argument();surfxml_pcdata_ix = 0; ENTER(E_surfxml_argument);
 }
 "/>" {
  if (!AX_surfxml_argument_value) FAIL("Required attribute `value' not set for `argument' element.");
  LEAVE; STag_surfxml_argument(); surfxml_pcdata_ix = 0; ETag_surfxml_argument(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_process_1: case S_surfxml_process: case S_surfxml_process_2: SET(S_surfxml_process_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of argument element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `argument' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `argument' element.");
}

<E_surfxml_argument>{
 "</argument"{s}">" {
  LEAVE;
  ETag_surfxml_argument();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_process_1: case S_surfxml_process: case S_surfxml_process_2: SET(S_surfxml_process_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</argument>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</argument>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</argument>' expected.");
}

<S_surfxml_AS_10,S_surfxml_AS_3,S_surfxml_random,S_surfxml_ASroute_1,S_surfxml_AS_2,E_surfxml_AS,S_surfxml_AS_12,E_surfxml_process,S_surfxml_process,S_surfxml_link_2,E_surfxml_random,S_surfxml_AS_8,S_surfxml_bypassRoute_2,E_surfxml_route,S_surfxml_AS_9,S_surfxml_platform_3,S_surfxml_route_1,S_surfxml_AS_11,S_surfxml_link_1,S_surfxml_AS,S_surfxml_bypassRoute,S_surfxml_link,E_surfxml_host,S_surfxml_config,S_surfxml_ASroute_2,S_surfxml_random_2,S_surfxml_platform_6,S_surfxml_process_2,E_surfxml_ASroute,S_surfxml_AS_6,E_surfxml_link,S_surfxml_platform_1,S_surfxml_bypassRoute_1,E_surfxml_config,S_surfxml_host_1,ROOT_surfxml_config,S_surfxml_route_2,E_surfxml_platform,S_surfxml_config_2,S_surfxml_random_1,S_surfxml_platform_4,S_surfxml_AS_1,S_surfxml_host,S_surfxml_platform_2,S_surfxml_process_1,S_surfxml_host_2,S_surfxml_AS_7,S_surfxml_AS_13,S_surfxml_ASroute,S_surfxml_platform_5,S_surfxml_AS_5,S_surfxml_config_1,S_surfxml_AS_4,S_surfxml_route,E_surfxml_bypassRoute>"<config"{s} FAIL("Starting tag <config> is not allowed here.");

<S_surfxml_platform>"<config"{s} {
  AX_surfxml_config_id = 0;
  ENTER(AL_surfxml_config); pushbuffer(0);
  }

<AL_surfxml_config>{
 "id"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_config_id);
 "id"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_config_id);

 ">" {
  LEAVE; STag_surfxml_config();surfxml_pcdata_ix = 0; ENTER(S_surfxml_config);
 }
 "/>" {
  LEAVE; STag_surfxml_config(); surfxml_pcdata_ix = 0; ETag_surfxml_config(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_platform: SET(S_surfxml_platform_1); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of config element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `config' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `config' element.");
}

<S_surfxml_config,S_surfxml_config_2,E_surfxml_config>{
 "</config"{s}">" {
  LEAVE;
  ETag_surfxml_config();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_platform: SET(S_surfxml_platform_1); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</config>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</config>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</config>' expected.");
}

 /* <!-- <!ATTLIST prop key CDATA #REQUIRED> -->
  * <!-- <!ATTLIST prop key CDATA #REQUIRED> -->  */

<S_surfxml_AS_10,S_surfxml_AS_3,S_surfxml_ASroute_1,S_surfxml_AS_2,E_surfxml_AS,S_surfxml_AS_12,E_surfxml_process,E_surfxml_random,S_surfxml_AS_8,S_surfxml_bypassRoute_2,E_surfxml_route,ROOT_surfxml_prop,S_surfxml_AS_9,S_surfxml_platform_3,S_surfxml_route_1,S_surfxml_AS_11,S_surfxml_AS,S_surfxml_bypassRoute,E_surfxml_host,S_surfxml_ASroute_2,S_surfxml_platform_6,E_surfxml_ASroute,S_surfxml_AS_6,E_surfxml_link,S_surfxml_platform,S_surfxml_platform_1,S_surfxml_bypassRoute_1,E_surfxml_config,S_surfxml_route_2,E_surfxml_platform,S_surfxml_platform_4,S_surfxml_AS_1,S_surfxml_platform_2,S_surfxml_AS_7,S_surfxml_AS_13,S_surfxml_ASroute,S_surfxml_platform_5,S_surfxml_AS_5,S_surfxml_AS_4,S_surfxml_route,E_surfxml_bypassRoute>"<prop"{s} FAIL("Starting tag <prop> is not allowed here.");

<S_surfxml_config_1,S_surfxml_config,S_surfxml_random,S_surfxml_host_1,S_surfxml_host_2,S_surfxml_host,S_surfxml_link_1,S_surfxml_link_2,S_surfxml_config_2,S_surfxml_random_2,S_surfxml_link,S_surfxml_random_1,S_surfxml_process_1,S_surfxml_process,S_surfxml_process_2>"<prop"{s} {
  AX_surfxml_prop_id = 0;
  AX_surfxml_prop_value = 0;
  ENTER(AL_surfxml_prop); pushbuffer(0);
  }

<AL_surfxml_prop>{
 "id"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_prop_id);
 "id"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_prop_id);

 "value"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_surfxml_prop_value);
 "value"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_surfxml_prop_value);

 ">" {
  if (!AX_surfxml_prop_id) FAIL("Required attribute `id' not set for `prop' element.");
  if (!AX_surfxml_prop_value) FAIL("Required attribute `value' not set for `prop' element.");
  LEAVE; STag_surfxml_prop();surfxml_pcdata_ix = 0; ENTER(E_surfxml_prop);
 }
 "/>" {
  if (!AX_surfxml_prop_id) FAIL("Required attribute `id' not set for `prop' element.");
  if (!AX_surfxml_prop_value) FAIL("Required attribute `value' not set for `prop' element.");
  LEAVE; STag_surfxml_prop(); surfxml_pcdata_ix = 0; ETag_surfxml_prop(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_random: case S_surfxml_random_2: case S_surfxml_random_1: SET(S_surfxml_random_2); break;
   case S_surfxml_config_1: case S_surfxml_config: case S_surfxml_config_2: SET(S_surfxml_config_2); break;
   case S_surfxml_process_1: case S_surfxml_process: case S_surfxml_process_2: SET(S_surfxml_process_2); break;
   case S_surfxml_host_1: case S_surfxml_host_2: case S_surfxml_host: SET(S_surfxml_host_2); break;
   case S_surfxml_link_1: case S_surfxml_link_2: case S_surfxml_link: SET(S_surfxml_link_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of prop element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `prop' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `prop' element.");
}

<E_surfxml_prop>{
 "</prop"{s}">" {
  LEAVE;
  ETag_surfxml_prop();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_random: case S_surfxml_random_2: case S_surfxml_random_1: SET(S_surfxml_random_2); break;
   case S_surfxml_config_1: case S_surfxml_config: case S_surfxml_config_2: SET(S_surfxml_config_2); break;
   case S_surfxml_process_1: case S_surfxml_process: case S_surfxml_process_2: SET(S_surfxml_process_2); break;
   case S_surfxml_host_1: case S_surfxml_host_2: case S_surfxml_host: SET(S_surfxml_host_2); break;
   case S_surfxml_link_1: case S_surfxml_link_2: case S_surfxml_link: SET(S_surfxml_link_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</prop>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</prop>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</prop>' expected.");
}

 /* EPILOG: after the root element. */

<EPILOG>{
 . {SET(PROLOG); yyless(0); CLEANUP; return -1;}
 <<EOF>> 	SUCCEED;
}

 /* CHARACTER DATA. */

<IN_trace,VALUE1,VALUE2>{
 /* Non-defined standard entities... */
"&amp;"  BUFFERPUTC('&');
"&lt;"   BUFFERPUTC('<');
"&gt;"   BUFFERPUTC('>');
"&apos;" BUFFERPUTC('\'');
"&quot;" BUFFERPUTC('"');

 /* Character entities. */
 "&#"[[:digit:]]+";"	BUFFERPUTC((unsigned char)atoi(yytext+2));
 "&#x"[[:xdigit:]]+";"	BUFFERPUTC((unsigned char)strtol(yytext+3,NULL,16));
}

<IN_trace,VALUE1,VALUE2,CDATA>{
 "\n"		|
 "\r"		|
 "\r\n"		|
 "\n\r"		BUFFERPUTC('\n');
}

<IN_trace>{
 "<![CDATA["	ENTER(CDATA);
 "]""]>"		FAIL("Unexpected `]""]>' in character data.");
}

<VALUE1>{
 \'		BUFFERDONE; LEAVE;
 <<EOF>>	FAIL("EOF in literal (\"'\" expected).");
}

<VALUE2>{
 \"		BUFFERDONE; LEAVE;
 <<EOF>>	FAIL("EOF in literal (`\"' expected).");
}

<IN_trace,VALUE1,VALUE2>{
 [^<&]		BUFFERPUTC(yytext[0]);
 [<&]		FAIL("Spurious `%c' in character data.",yytext[0]);
}

<CDATA>{
 "]""]>"		LEAVE;
 /* "]""]"		BUFFERPUTC(yytext[0]); BUFFERPUTC(yytext[1]); */
 .		BUFFERPUTC(yytext[0]);
 <<EOF>>	FAIL("EOF in CDATA section.");
}

 /* Impossible rules to avoid warnings from flex(1). */
 /* Ideally, this should be replaced by code in flexml.pl that
    generates just the states not covered by other rules. */
<*>{
 .|[\n] FAIL("Syntax error on character `%c'.", yytext[0]);
}

%%

/* Element context stack lookup. */
int surfxml_element_context(int i)
{
  return (0<i && i<yy_start_stack_depth
	  ? yy_start_stack[yy_start_stack_ptr - i]
	  : 0);
}

#ifdef FLEX_DEBUG
void print_yy_stack(char* fmt, ...)
{
  int i = 0; va_list ap; va_start(ap, fmt);
  vfprintf(stderr, fmt, ap);
  if (surfxml_statenames) {
      for (i=1; i<yy_start_stack_ptr; i++) {
          fprintf(stderr, "%s/", surfxml_statenames[yy_start_stack[i] ]);
      }
      fprintf(stderr,"%s\n", surfxml_statenames[YY_START]);
  }
  va_end(ap);
}

void print_surfxml_bufferstack()
{
    int i;
    fputs("Buffer: ", stderr);
    for (i = 0; i < blimit; i++) {
       if ( surfxml_bufferstack[i] == '\377' ) break;
         putc(surfxml_bufferstack[i], stderr);
    }
    putc('\n', stderr);
}

static void debug_enter(int state, const char* statename) {
  yy_push_state(state);
  if (yy_flex_debug) {
       print_yy_stack("--ENTER(%s) : ",statename);
       print_surfxml_bufferstack();
  }
}

static void debug_leave(void) {
    if (yy_flex_debug) {
        print_yy_stack("--LEAVE : ");
	print_surfxml_bufferstack();
    }
  yy_pop_state();
}

static void debug_set(int state, const char* statename) {
  BEGIN(state);
  if (yy_flex_debug) print_yy_stack("--SET(%s) : ",statename);
}
#endif


static void cleanup(void)
{
    if (surfxml_statenames) {
        free(surfxml_statenames);
	surfxml_statenames = NULL;
    }
    free(surfxml_bufferstack);
    surfxml_bufferstack = NULL;

    free(indexstack);
    indexstack = NULL;
}


static int fail(const char* fmt, ...)
{
    int chars_left, used;
    va_list ap; va_start(ap, fmt);
#ifdef FLEXML_yylineno
    used = sprintf(flexml_err_msg,
		   "Invalid XML (XML input line %d, state %d): ",
		   yylineno, YY_START);
#else
    used = sprintf(flexml_err_msg,
		   "Invalid XML (state %d): ",
		   YY_START);
#endif
    chars_left = flexml_max_err_msg_size - used - 1;
    vsnprintf(flexml_err_msg + used, chars_left, fmt, ap);
    va_end(ap);

#ifndef FLEXML_quiet_parser
    /* print directly to sdterr */
    fprintf(stderr, "%s\n", flexml_err_msg);
    flexml_err_msg[0] = '\0';
#endif

    cleanup();

    return 1;
}
