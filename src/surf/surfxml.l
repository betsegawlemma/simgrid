/* Validating XML processor for surfxml.dtd.
 * Generated 2006/05/29 21:38:10.
 *
 * This program was generated with the FleXML XML processor generator.
 * FleXML is Copyright © 1999-2005 Kristoffer Rose.  All rights reserved.
 * (Id: flexml.pl,v 1.48 2006/03/21 13:09:12 mquinson Exp).
 * 
 * There are two, intertwined parts to this program, part A and part B.
 *
 * Part A
 * ------
 * 
 * Some parts, here collectively called "Part A", are found in the 
 * FleXML package.  They are Copyright © 1999-2005 Kristoffer Rose. 
 * All rights reserved.
 *
 * You can redistribute, use, perform, display and/or modify "Part A"
 * provided the following two conditions hold:
 *
 * 1. The program is distributed WITHOUT ANY WARRANTY from the author of
 *    FleXML; without even the implied warranty of MERCHANTABILITY or
 *    FITNESS FOR A PARTICULAR PURPOSE.
 *
 * 2. The program distribution conditions do not in any way affect the
 *    distribution conditions of the FleXML system used to generate this
 *    file or any version of FleXML derived from that system.
 *
 * Notice that these are explicit rights granted to you for files
 * generated by the FleXML system.  For your rights in connection with
 * the FleXML system itself please consult the GNU General Public License.
 * 
 * Part B
 * ------
 * 
 * The other parts, here collectively called "Part B", and which came 
 * from the DTD used by FleXML to generate this program, can be 
 * distributed (or not, as the case may be) under the terms of whoever
 * wrote them, provided these terms respect and obey the two conditions 
 * above under the heading "Part A".
 *
 * The author of and contributors to FleXML specifically disclaim
 * any copyright interest in "Part B", unless "Part B" was written 
 * by the author of or contributors to FleXML.
 * 
 */

%{

/* Version strings. */
const char rcs_surfxml_flexml_skeleton[] =
 "$" "Id: skel,v 1.28 2006/03/21 12:04:13 legranda Exp $";
const char rcs_surfxml_flexml[] =
 "$" "Id: flexml.pl,v 1.48 2006/03/21 13:09:12 mquinson Exp $";

/* ANSI headers. */
#include <unistd.h>
#include <stdio.h>
#include <string.h>
#include <assert.h>
#include <stdarg.h>
#include <ctype.h>

/* Generated definitions. */
#define FLEXML_yylineno
#define FLEXML_BUFFERSTACKSIZE 1000000

/* XML processor api. */
/* FleXML-provided data. */
const char* surfxml_pcdata;
AT_surfxml_network_link_bandwidth A_surfxml_network_link_bandwidth;
AT_surfxml_process_host A_surfxml_process_host;
AT_surfxml_network_link_latency_file A_surfxml_network_link_latency_file;
AT_surfxml_route_impact_on_dst_with_other_send A_surfxml_route_impact_on_dst_with_other_send;
AT_surfxml_cpu_interference_send_recv A_surfxml_cpu_interference_send_recv;
AT_surfxml_route_impact_on_dst A_surfxml_route_impact_on_dst;
AT_surfxml_platform_description_version A_surfxml_platform_description_version;
AT_surfxml_route_impact_on_src_with_other_recv A_surfxml_route_impact_on_src_with_other_recv;
AT_surfxml_route_element_name A_surfxml_route_element_name;
AT_surfxml_process_start_time A_surfxml_process_start_time;
AT_surfxml_process_function A_surfxml_process_function;
AT_surfxml_cpu_state A_surfxml_cpu_state;
AT_surfxml_cpu_interference_send A_surfxml_cpu_interference_send;
AT_surfxml_network_link_bandwidth_file A_surfxml_network_link_bandwidth_file;
AT_surfxml_cpu_name A_surfxml_cpu_name;
AT_surfxml_process_kill_time A_surfxml_process_kill_time;
AT_surfxml_network_link_state A_surfxml_network_link_state;
AT_surfxml_cpu_availability_file A_surfxml_cpu_availability_file;
AT_surfxml_argument_value A_surfxml_argument_value;
AT_surfxml_route_src A_surfxml_route_src;
AT_surfxml_route_impact_on_src A_surfxml_route_impact_on_src;
AT_surfxml_cpu_max_outgoing_rate A_surfxml_cpu_max_outgoing_rate;
AT_surfxml_cpu_availability A_surfxml_cpu_availability;
AT_surfxml_cpu_interference_recv A_surfxml_cpu_interference_recv;
AT_surfxml_network_link_name A_surfxml_network_link_name;
AT_surfxml_cpu_power A_surfxml_cpu_power;
AT_surfxml_include_file A_surfxml_include_file;
AT_surfxml_network_link_sharing_policy A_surfxml_network_link_sharing_policy;
AT_surfxml_route_dst A_surfxml_route_dst;
AT_surfxml_network_link_latency A_surfxml_network_link_latency;
AT_surfxml_cpu_state_file A_surfxml_cpu_state_file;
AT_surfxml_network_link_state_file A_surfxml_network_link_state_file;

/* XML state. */
#ifdef FLEX_DEBUG
# define ENTER(state)	debug_enter(state,#state)
# define LEAVE		debug_leave()
# define SET(state)	debug_set(state,#state)
  static void debug_enter(int, const char*);
  static void debug_leave(void);
  static void debug_set(int, const char*);
#else
# define ENTER(state)	(yy_push_state(state))
# define LEAVE		(yy_pop_state())
# define SET(state)	BEGIN(state)
#endif

/* Generic actions. */
#define SKIP	/*skip*/
#define SUCCEED        CLEANUP; return 0

#define FAIL	return fail
static int fail(const char*, ...);
const char * surfxml_parse_err_msg(void);

/* Cleanup */
static void cleanup(void);
#define CLEANUP  cleanup()

/* Text buffer stack handling. */
static char bufferstack[FLEXML_BUFFERSTACKSIZE];
static char* limit = bufferstack + FLEXML_BUFFERSTACKSIZE;
typedef struct BufferLast_s {
  struct BufferLast_s *old; char* saved; char new1[1];
} BufferLast;
#ifdef FLEXML_HasMixed
static BufferLast* last = (BufferLast*)0;
#endif
static char* next = bufferstack;

#define BUFFERSET(P)  (P = next)
#define BUFFERPUTC(C) (assert(next<limit), *(next++) = (C))
#define BUFFERDONE    (BUFFERPUTC('\0'))

#define BUFFERLITERAL(C,P) bufferliteral(C,&(P),yytext)
static void bufferliteral(char c, const char** pp, char* text)
{
  char *s = strchr(text,c), *e = strrchr(text,c);
  assert(s <= e); BUFFERSET(*pp);
  while (++s<e) {
    if (isspace(*s)) { BUFFERPUTC(' '); while (isspace(*s)) ++s; }
    else BUFFERPUTC(*s);
  }
  BUFFERDONE;
}

#ifdef FLEXML_HasMixed
static void pushbuffer(char* p)
{
  BufferLast* l = (BufferLast*)next;
  assert(next < limit);
  l->old = last;
  l->saved = p;
  next = l->new1;
  last = l;
}

static char* popbuffer(void)
{
  BufferLast* l = last;
  assert(last != (BufferLast*)0);
  last = l->old;
  next = (char*)l;
  return l->saved;
}
#endif

/* General internal entities are `unput' back onto the input stream... */
#define ENTITYTEXT(T) \
  { char *s = (T), *e = s+strlen(s);\
    while (--e >= s) { unput(*e); }}
%}

/* Flex standard options. */
%option stack
%option noyy_top_state
%option noinput
%option noreject
%option noyymore
%option noyywrap

/* Flex user-requested options. */
%option yylineno
%option nounput

/* XML character classes (currently restricted to ASCII). */

/* "Common syntactic structures." */
S		[ \t\n\r\f]+
s		[ \t\n\r\f]*

/* "Names and Tokens." */
NameChar	[A-Za-z0-9.:_-]
Name		[A-Za-z_:]{NameChar}*
Names 		{Name}({S}{Name})*
Nmtoken		({NameChar})+
Nmtokens 	{Nmtoken}({S}{Nmtoken})*

/* Miscellaneous. */
VersionNum	[a-zA-Z0-9_.:-]+
Eq		{s}"="{s}
Literal		\'[^'']*\'|\"[^""]*\"

/* Parser states (flex `exclusive start conditions'):
 *
 * PROLOG	the XML prolog of the document before <?xml...>
 * DOCTYPE	the XML prolog of the document after <?xml...>
 * EPILOG	after the root element
 * INCOMMENT	inside an XML comment <!--....-->
 * INPI		inside an XML PI <?...?>
 * VALUE1	inside a '...'-delimited literal
 * VALUE2	inside a "..."-delimited literal
 * CDATA	inside a <![CDATA[...] ]> section.
 * ROOT_<tag>	expect root element <tag>
 * AL_<tag>	inside the attribute list for <tag>
 * IN_<tag>	inside a <tag> with element contents (ready for end tag)
 * IMPOSSIBLE	dummy to permit disabling rules; must be last
 */
%x PROLOG DOCTYPE EPILOG INCOMMENT INPI VALUE1 VALUE2 CDATA
%x ROOT_surfxml_platform_description AL_surfxml_platform_description S_surfxml_platform_description S_surfxml_platform_description_1 S_surfxml_platform_description_2 E_surfxml_platform_description
%x ROOT_surfxml_include AL_surfxml_include S_surfxml_include S_surfxml_include_1 S_surfxml_include_2 E_surfxml_include
%x ROOT_surfxml_cpu AL_surfxml_cpu E_surfxml_cpu
%x ROOT_surfxml_network_link AL_surfxml_network_link E_surfxml_network_link
%x ROOT_surfxml_route AL_surfxml_route S_surfxml_route S_surfxml_route_1 S_surfxml_route_2 E_surfxml_route
%x ROOT_surfxml_route_element AL_surfxml_route_element E_surfxml_route_element
%x ROOT_surfxml_process AL_surfxml_process S_surfxml_process S_surfxml_process_1 S_surfxml_process_2 E_surfxml_process
%x ROOT_surfxml_argument AL_surfxml_argument E_surfxml_argument
%x IMPOSSIBLE

%{
/* State names. */
const char* *surfxml_statenames=NULL;
%}

%%

 /* Bypass Flex's default INITIAL state and begin by parsing the XML prolog. */
 SET(PROLOG);
  /* FleXML_init */
  next = bufferstack;
  if(!surfxml_statenames) {surfxml_statenames= (const char **)calloc(IMPOSSIBLE,sizeof(char*));
  surfxml_statenames[PROLOG] = NULL;
  surfxml_statenames[DOCTYPE] = NULL;
  surfxml_statenames[EPILOG] = NULL;
  surfxml_statenames[INCOMMENT] = NULL;
  surfxml_statenames[INPI] = NULL;
  surfxml_statenames[VALUE1] = NULL;
  surfxml_statenames[VALUE2] = NULL;
  surfxml_statenames[CDATA] = NULL;
  surfxml_statenames[ROOT_surfxml_platform_description] = NULL;
  surfxml_statenames[AL_surfxml_platform_description] = NULL;
  surfxml_statenames[S_surfxml_platform_description] = "platform_description";
  surfxml_statenames[S_surfxml_platform_description_1] = "platform_description";
  surfxml_statenames[S_surfxml_platform_description_2] = "platform_description";
  surfxml_statenames[E_surfxml_platform_description] = "platform_description";
  surfxml_statenames[ROOT_surfxml_include] = NULL;
  surfxml_statenames[AL_surfxml_include] = NULL;
  surfxml_statenames[S_surfxml_include] = "include";
  surfxml_statenames[S_surfxml_include_1] = "include";
  surfxml_statenames[S_surfxml_include_2] = "include";
  surfxml_statenames[E_surfxml_include] = "include";
  surfxml_statenames[ROOT_surfxml_cpu] = NULL;
  surfxml_statenames[AL_surfxml_cpu] = NULL;
  surfxml_statenames[E_surfxml_cpu] = "cpu";
  surfxml_statenames[ROOT_surfxml_network_link] = NULL;
  surfxml_statenames[AL_surfxml_network_link] = NULL;
  surfxml_statenames[E_surfxml_network_link] = "network_link";
  surfxml_statenames[ROOT_surfxml_route] = NULL;
  surfxml_statenames[AL_surfxml_route] = NULL;
  surfxml_statenames[S_surfxml_route] = "route";
  surfxml_statenames[S_surfxml_route_1] = "route";
  surfxml_statenames[S_surfxml_route_2] = "route";
  surfxml_statenames[E_surfxml_route] = "route";
  surfxml_statenames[ROOT_surfxml_route_element] = NULL;
  surfxml_statenames[AL_surfxml_route_element] = NULL;
  surfxml_statenames[E_surfxml_route_element] = "route_element";
  surfxml_statenames[ROOT_surfxml_process] = NULL;
  surfxml_statenames[AL_surfxml_process] = NULL;
  surfxml_statenames[S_surfxml_process] = "process";
  surfxml_statenames[S_surfxml_process_1] = "process";
  surfxml_statenames[S_surfxml_process_2] = "process";
  surfxml_statenames[E_surfxml_process] = "process";
  surfxml_statenames[ROOT_surfxml_argument] = NULL;
  surfxml_statenames[AL_surfxml_argument] = NULL;
  surfxml_statenames[E_surfxml_argument] = "argument";
  }

 /* COMMENTS and PIs: handled uniformly for efficiency. */

<ROOT_surfxml_platform_description,AL_surfxml_platform_description,S_surfxml_platform_description,S_surfxml_platform_description_1,S_surfxml_platform_description_2,E_surfxml_platform_description,ROOT_surfxml_include,AL_surfxml_include,S_surfxml_include,S_surfxml_include_1,S_surfxml_include_2,E_surfxml_include,ROOT_surfxml_cpu,AL_surfxml_cpu,E_surfxml_cpu,ROOT_surfxml_network_link,AL_surfxml_network_link,E_surfxml_network_link,ROOT_surfxml_route,AL_surfxml_route,S_surfxml_route,S_surfxml_route_1,S_surfxml_route_2,E_surfxml_route,ROOT_surfxml_route_element,AL_surfxml_route_element,E_surfxml_route_element,ROOT_surfxml_process,AL_surfxml_process,S_surfxml_process,S_surfxml_process_1,S_surfxml_process_2,E_surfxml_process,ROOT_surfxml_argument,AL_surfxml_argument,E_surfxml_argument,PROLOG,DOCTYPE,EPILOG>{
 "<!--" ENTER(INCOMMENT);
 "<?" ENTER(INPI);
}
<INCOMMENT>{
 "-->"		LEAVE;
 "--"		|
 .		|
 \n		SKIP;
 <<EOF>>	FAIL("EOF in comment.");
}
<INPI>{
 "?>"		LEAVE;
 .		|
 \n		SKIP;
 <<EOF>>	FAIL("EOF in PI (processing instruction).");
}

 /* SPACES: skipped uniformly */

<ROOT_surfxml_platform_description,AL_surfxml_platform_description,S_surfxml_platform_description,S_surfxml_platform_description_1,S_surfxml_platform_description_2,E_surfxml_platform_description,ROOT_surfxml_include,AL_surfxml_include,S_surfxml_include,S_surfxml_include_1,S_surfxml_include_2,E_surfxml_include,ROOT_surfxml_cpu,AL_surfxml_cpu,E_surfxml_cpu,ROOT_surfxml_network_link,AL_surfxml_network_link,E_surfxml_network_link,ROOT_surfxml_route,AL_surfxml_route,S_surfxml_route,S_surfxml_route_1,S_surfxml_route_2,E_surfxml_route,ROOT_surfxml_route_element,AL_surfxml_route_element,E_surfxml_route_element,ROOT_surfxml_process,AL_surfxml_process,S_surfxml_process,S_surfxml_process_1,S_surfxml_process_2,E_surfxml_process,ROOT_surfxml_argument,AL_surfxml_argument,E_surfxml_argument,PROLOG,DOCTYPE,EPILOG>{S} SKIP;

 /* PROLOG: determine root element and process it. */

<PROLOG>{
 "<?xml"({S}version{Eq}(\'{VersionNum}\'|\"{VersionNum}\"))?({S}encoding{Eq}(\'[^']*\'|\"[^"]*\"))?"?>" SET(DOCTYPE); 
 "<?xml"[^>]*">" FAIL("Bad declaration %s.",yytext);
}

<PROLOG,DOCTYPE>{
 "<!DOCTYPE"{S}"argument"{S}SYSTEM{S}("'surfxml.dtd'"|"\"surfxml.dtd\""){s}">" SET(ROOT_surfxml_argument);
 "<!DOCTYPE"{S}"route_element"{S}SYSTEM{S}("'surfxml.dtd'"|"\"surfxml.dtd\""){s}">" SET(ROOT_surfxml_route_element);
 "<!DOCTYPE"{S}"cpu"{S}SYSTEM{S}("'surfxml.dtd'"|"\"surfxml.dtd\""){s}">" SET(ROOT_surfxml_cpu);
 "<!DOCTYPE"{S}"include"{S}SYSTEM{S}("'surfxml.dtd'"|"\"surfxml.dtd\""){s}">" SET(ROOT_surfxml_include);
 "<!DOCTYPE"{S}"route"{S}SYSTEM{S}("'surfxml.dtd'"|"\"surfxml.dtd\""){s}">" SET(ROOT_surfxml_route);
 "<!DOCTYPE"{S}"platform_description"{S}SYSTEM{S}("'surfxml.dtd'"|"\"surfxml.dtd\""){s}">" SET(ROOT_surfxml_platform_description);
 "<!DOCTYPE"{S}"network_link"{S}SYSTEM{S}("'surfxml.dtd'"|"\"surfxml.dtd\""){s}">" SET(ROOT_surfxml_network_link);
 "<!DOCTYPE"{S}"process"{S}SYSTEM{S}("'surfxml.dtd'"|"\"surfxml.dtd\""){s}">" SET(ROOT_surfxml_process);
 "<!"[^>-][^>]*">" FAIL("Bad declaration %s.",yytext);
 . 		FAIL("Unexpected character `%c' in prolog.", yytext[0]);
 <<EOF>> 	FAIL("EOF in prolog.");
}

 /* RULES DERIVED FROM DTD. */

 /* <!-- Small DTD for SURF based tools. -->  */

<ROOT_surfxml_platform_description>"<platform_description"{s} {
  A_surfxml_platform_description_version = "1.0";
  ENTER(AL_surfxml_platform_description);
  }

<AL_surfxml_platform_description>{
 "version"{Eq}\' ENTER(VALUE1); BUFFERSET(A_surfxml_platform_description_version);
 "version"{Eq}\" ENTER(VALUE2); BUFFERSET(A_surfxml_platform_description_version);

 ">" {
  LEAVE; STag_surfxml_platform_description();surfxml_pcdata = NULL; ENTER(S_surfxml_platform_description);
 }
 "/>" {
  LEAVE; STag_surfxml_platform_description(); surfxml_pcdata = NULL; ETag_surfxml_platform_description();
  switch (YY_START) {
   case ROOT_surfxml_platform_description: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of platform_description element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `platform_description' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `platform_description' element.");
}

<E_surfxml_platform_description,S_surfxml_platform_description_2,S_surfxml_platform_description>{
 "</platform_description"{s}">" {
  LEAVE;
  ETag_surfxml_platform_description();
  switch (YY_START) {
   case ROOT_surfxml_platform_description: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</platform_description>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</platform_description>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</platform_description>' expected.");
}

<ROOT_surfxml_include,S_surfxml_platform_description_2,S_surfxml_include,S_surfxml_include_2,S_surfxml_platform_description_1,S_surfxml_include_1,S_surfxml_platform_description>"<include"{s} {
  A_surfxml_include_file = NULL;
  ENTER(AL_surfxml_include);
  }

<AL_surfxml_include>{
 "file"{Eq}\' ENTER(VALUE1); BUFFERSET(A_surfxml_include_file);
 "file"{Eq}\" ENTER(VALUE2); BUFFERSET(A_surfxml_include_file);

 ">" {
  if (!A_surfxml_include_file) FAIL("Required attribute `file' not set for `include' element.");
  LEAVE; STag_surfxml_include();surfxml_pcdata = NULL; ENTER(S_surfxml_include);
 }
 "/>" {
  if (!A_surfxml_include_file) FAIL("Required attribute `file' not set for `include' element.");
  LEAVE; STag_surfxml_include(); surfxml_pcdata = NULL; ETag_surfxml_include();
  switch (YY_START) {
   case S_surfxml_platform_description_2: case S_surfxml_platform_description_1: case S_surfxml_platform_description: SET(S_surfxml_platform_description_2); break;
   case ROOT_surfxml_include: SET(EPILOG); break;
   case S_surfxml_include: case S_surfxml_include_2: case S_surfxml_include_1: SET(S_surfxml_include_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of include element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `include' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `include' element.");
}

<E_surfxml_include,S_surfxml_include,S_surfxml_include_2>{
 "</include"{s}">" {
  LEAVE;
  ETag_surfxml_include();
  switch (YY_START) {
   case S_surfxml_platform_description_2: case S_surfxml_platform_description_1: case S_surfxml_platform_description: SET(S_surfxml_platform_description_2); break;
   case ROOT_surfxml_include: SET(EPILOG); break;
   case S_surfxml_include: case S_surfxml_include_2: case S_surfxml_include_1: SET(S_surfxml_include_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</include>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</include>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</include>' expected.");
}

<ROOT_surfxml_cpu,S_surfxml_platform_description_2,S_surfxml_include,S_surfxml_include_2,S_surfxml_platform_description_1,S_surfxml_include_1,S_surfxml_platform_description>"<cpu"{s} {
  A_surfxml_cpu_name = NULL;
  A_surfxml_cpu_power = NULL;
  A_surfxml_cpu_availability = "1.0";
  A_surfxml_cpu_availability_file = NULL;
  A_surfxml_cpu_state = A_surfxml_cpu_state_ON;
  A_surfxml_cpu_state_file = NULL;
  A_surfxml_cpu_interference_send = "1.0";
  A_surfxml_cpu_interference_recv = "1.0";
  A_surfxml_cpu_interference_send_recv = "1.0";
  A_surfxml_cpu_max_outgoing_rate = "-1.0";
  ENTER(AL_surfxml_cpu);
  }

<AL_surfxml_cpu>{
 "name"{Eq}\' ENTER(VALUE1); BUFFERSET(A_surfxml_cpu_name);
 "name"{Eq}\" ENTER(VALUE2); BUFFERSET(A_surfxml_cpu_name);

 "power"{Eq}\' ENTER(VALUE1); BUFFERSET(A_surfxml_cpu_power);
 "power"{Eq}\" ENTER(VALUE2); BUFFERSET(A_surfxml_cpu_power);

 "availability"{Eq}\' ENTER(VALUE1); BUFFERSET(A_surfxml_cpu_availability);
 "availability"{Eq}\" ENTER(VALUE2); BUFFERSET(A_surfxml_cpu_availability);

 "availability_file"{Eq}\' ENTER(VALUE1); BUFFERSET(A_surfxml_cpu_availability_file);
 "availability_file"{Eq}\" ENTER(VALUE2); BUFFERSET(A_surfxml_cpu_availability_file);

 "state"{Eq}"'ON'" |
 "state"{Eq}"\"ON\"" A_surfxml_cpu_state = A_surfxml_cpu_state_ON;
 "state"{Eq}"'OFF'" |
 "state"{Eq}"\"OFF\"" A_surfxml_cpu_state = A_surfxml_cpu_state_OFF;

 "state_file"{Eq}\' ENTER(VALUE1); BUFFERSET(A_surfxml_cpu_state_file);
 "state_file"{Eq}\" ENTER(VALUE2); BUFFERSET(A_surfxml_cpu_state_file);

 "interference_send"{Eq}\' ENTER(VALUE1); BUFFERSET(A_surfxml_cpu_interference_send);
 "interference_send"{Eq}\" ENTER(VALUE2); BUFFERSET(A_surfxml_cpu_interference_send);

 "interference_recv"{Eq}\' ENTER(VALUE1); BUFFERSET(A_surfxml_cpu_interference_recv);
 "interference_recv"{Eq}\" ENTER(VALUE2); BUFFERSET(A_surfxml_cpu_interference_recv);

 "interference_send_recv"{Eq}\' ENTER(VALUE1); BUFFERSET(A_surfxml_cpu_interference_send_recv);
 "interference_send_recv"{Eq}\" ENTER(VALUE2); BUFFERSET(A_surfxml_cpu_interference_send_recv);

 "max_outgoing_rate"{Eq}\' ENTER(VALUE1); BUFFERSET(A_surfxml_cpu_max_outgoing_rate);
 "max_outgoing_rate"{Eq}\" ENTER(VALUE2); BUFFERSET(A_surfxml_cpu_max_outgoing_rate);

 ">" {
  if (!A_surfxml_cpu_name) FAIL("Required attribute `name' not set for `cpu' element.");
  if (!A_surfxml_cpu_power) FAIL("Required attribute `power' not set for `cpu' element.");
  LEAVE; STag_surfxml_cpu();surfxml_pcdata = NULL; ENTER(E_surfxml_cpu);
 }
 "/>" {
  if (!A_surfxml_cpu_name) FAIL("Required attribute `name' not set for `cpu' element.");
  if (!A_surfxml_cpu_power) FAIL("Required attribute `power' not set for `cpu' element.");
  LEAVE; STag_surfxml_cpu(); surfxml_pcdata = NULL; ETag_surfxml_cpu();
  switch (YY_START) {
   case S_surfxml_platform_description_2: case S_surfxml_platform_description_1: case S_surfxml_platform_description: SET(S_surfxml_platform_description_2); break;
   case ROOT_surfxml_cpu: SET(EPILOG); break;
   case S_surfxml_include: case S_surfxml_include_2: case S_surfxml_include_1: SET(S_surfxml_include_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of cpu element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `cpu' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `cpu' element.");
}

<E_surfxml_cpu>{
 "</cpu"{s}">" {
  LEAVE;
  ETag_surfxml_cpu();
  switch (YY_START) {
   case S_surfxml_platform_description_2: case S_surfxml_platform_description_1: case S_surfxml_platform_description: SET(S_surfxml_platform_description_2); break;
   case ROOT_surfxml_cpu: SET(EPILOG); break;
   case S_surfxml_include: case S_surfxml_include_2: case S_surfxml_include_1: SET(S_surfxml_include_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</cpu>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</cpu>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</cpu>' expected.");
}

<ROOT_surfxml_network_link,S_surfxml_platform_description_2,S_surfxml_include,S_surfxml_include_2,S_surfxml_platform_description_1,S_surfxml_include_1,S_surfxml_platform_description>"<network_link"{s} {
  A_surfxml_network_link_name = NULL;
  A_surfxml_network_link_bandwidth = NULL;
  A_surfxml_network_link_bandwidth_file = NULL;
  A_surfxml_network_link_latency = "0.0";
  A_surfxml_network_link_latency_file = NULL;
  A_surfxml_network_link_state = A_surfxml_network_link_state_ON;
  A_surfxml_network_link_state_file = NULL;
  A_surfxml_network_link_sharing_policy = A_surfxml_network_link_sharing_policy_SHARED;
  ENTER(AL_surfxml_network_link);
  }

<AL_surfxml_network_link>{
 "name"{Eq}\' ENTER(VALUE1); BUFFERSET(A_surfxml_network_link_name);
 "name"{Eq}\" ENTER(VALUE2); BUFFERSET(A_surfxml_network_link_name);

 "bandwidth"{Eq}\' ENTER(VALUE1); BUFFERSET(A_surfxml_network_link_bandwidth);
 "bandwidth"{Eq}\" ENTER(VALUE2); BUFFERSET(A_surfxml_network_link_bandwidth);

 "bandwidth_file"{Eq}\' ENTER(VALUE1); BUFFERSET(A_surfxml_network_link_bandwidth_file);
 "bandwidth_file"{Eq}\" ENTER(VALUE2); BUFFERSET(A_surfxml_network_link_bandwidth_file);

 "latency"{Eq}\' ENTER(VALUE1); BUFFERSET(A_surfxml_network_link_latency);
 "latency"{Eq}\" ENTER(VALUE2); BUFFERSET(A_surfxml_network_link_latency);

 "latency_file"{Eq}\' ENTER(VALUE1); BUFFERSET(A_surfxml_network_link_latency_file);
 "latency_file"{Eq}\" ENTER(VALUE2); BUFFERSET(A_surfxml_network_link_latency_file);

 "state"{Eq}"'ON'" |
 "state"{Eq}"\"ON\"" A_surfxml_network_link_state = A_surfxml_network_link_state_ON;
 "state"{Eq}"'OFF'" |
 "state"{Eq}"\"OFF\"" A_surfxml_network_link_state = A_surfxml_network_link_state_OFF;

 "state_file"{Eq}\' ENTER(VALUE1); BUFFERSET(A_surfxml_network_link_state_file);
 "state_file"{Eq}\" ENTER(VALUE2); BUFFERSET(A_surfxml_network_link_state_file);

 "sharing_policy"{Eq}"'SHARED'" |
 "sharing_policy"{Eq}"\"SHARED\"" A_surfxml_network_link_sharing_policy = A_surfxml_network_link_sharing_policy_SHARED;
 "sharing_policy"{Eq}"'FATPIPE'" |
 "sharing_policy"{Eq}"\"FATPIPE\"" A_surfxml_network_link_sharing_policy = A_surfxml_network_link_sharing_policy_FATPIPE;

 ">" {
  if (!A_surfxml_network_link_name) FAIL("Required attribute `name' not set for `network_link' element.");
  if (!A_surfxml_network_link_bandwidth) FAIL("Required attribute `bandwidth' not set for `network_link' element.");
  LEAVE; STag_surfxml_network_link();surfxml_pcdata = NULL; ENTER(E_surfxml_network_link);
 }
 "/>" {
  if (!A_surfxml_network_link_name) FAIL("Required attribute `name' not set for `network_link' element.");
  if (!A_surfxml_network_link_bandwidth) FAIL("Required attribute `bandwidth' not set for `network_link' element.");
  LEAVE; STag_surfxml_network_link(); surfxml_pcdata = NULL; ETag_surfxml_network_link();
  switch (YY_START) {
   case S_surfxml_platform_description_2: case S_surfxml_platform_description_1: case S_surfxml_platform_description: SET(S_surfxml_platform_description_2); break;
   case ROOT_surfxml_network_link: SET(EPILOG); break;
   case S_surfxml_include: case S_surfxml_include_2: case S_surfxml_include_1: SET(S_surfxml_include_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of network_link element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `network_link' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `network_link' element.");
}

<E_surfxml_network_link>{
 "</network_link"{s}">" {
  LEAVE;
  ETag_surfxml_network_link();
  switch (YY_START) {
   case S_surfxml_platform_description_2: case S_surfxml_platform_description_1: case S_surfxml_platform_description: SET(S_surfxml_platform_description_2); break;
   case ROOT_surfxml_network_link: SET(EPILOG); break;
   case S_surfxml_include: case S_surfxml_include_2: case S_surfxml_include_1: SET(S_surfxml_include_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</network_link>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</network_link>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</network_link>' expected.");
}

<ROOT_surfxml_route,S_surfxml_platform_description_2,S_surfxml_include,S_surfxml_include_2,S_surfxml_platform_description_1,S_surfxml_include_1,S_surfxml_platform_description>"<route"{s} {
  A_surfxml_route_src = NULL;
  A_surfxml_route_dst = NULL;
  A_surfxml_route_impact_on_src = "0.0";
  A_surfxml_route_impact_on_dst = "0.0";
  A_surfxml_route_impact_on_src_with_other_recv = "0.0";
  A_surfxml_route_impact_on_dst_with_other_send = "0.0";
  ENTER(AL_surfxml_route);
  }

<AL_surfxml_route>{
 "src"{Eq}\' ENTER(VALUE1); BUFFERSET(A_surfxml_route_src);
 "src"{Eq}\" ENTER(VALUE2); BUFFERSET(A_surfxml_route_src);

 "dst"{Eq}\' ENTER(VALUE1); BUFFERSET(A_surfxml_route_dst);
 "dst"{Eq}\" ENTER(VALUE2); BUFFERSET(A_surfxml_route_dst);

 "impact_on_src"{Eq}\' ENTER(VALUE1); BUFFERSET(A_surfxml_route_impact_on_src);
 "impact_on_src"{Eq}\" ENTER(VALUE2); BUFFERSET(A_surfxml_route_impact_on_src);

 "impact_on_dst"{Eq}\' ENTER(VALUE1); BUFFERSET(A_surfxml_route_impact_on_dst);
 "impact_on_dst"{Eq}\" ENTER(VALUE2); BUFFERSET(A_surfxml_route_impact_on_dst);

 "impact_on_src_with_other_recv"{Eq}\' ENTER(VALUE1); BUFFERSET(A_surfxml_route_impact_on_src_with_other_recv);
 "impact_on_src_with_other_recv"{Eq}\" ENTER(VALUE2); BUFFERSET(A_surfxml_route_impact_on_src_with_other_recv);

 "impact_on_dst_with_other_send"{Eq}\' ENTER(VALUE1); BUFFERSET(A_surfxml_route_impact_on_dst_with_other_send);
 "impact_on_dst_with_other_send"{Eq}\" ENTER(VALUE2); BUFFERSET(A_surfxml_route_impact_on_dst_with_other_send);

 ">" {
  if (!A_surfxml_route_src) FAIL("Required attribute `src' not set for `route' element.");
  if (!A_surfxml_route_dst) FAIL("Required attribute `dst' not set for `route' element.");
  LEAVE; STag_surfxml_route();surfxml_pcdata = NULL; ENTER(S_surfxml_route);
 }
 "/>" {
  if (!A_surfxml_route_src) FAIL("Required attribute `src' not set for `route' element.");
  if (!A_surfxml_route_dst) FAIL("Required attribute `dst' not set for `route' element.");
  LEAVE; STag_surfxml_route(); surfxml_pcdata = NULL; ETag_surfxml_route();
  switch (YY_START) {
   case S_surfxml_platform_description_2: case S_surfxml_platform_description_1: case S_surfxml_platform_description: SET(S_surfxml_platform_description_2); break;
   case ROOT_surfxml_route: SET(EPILOG); break;
   case S_surfxml_include: case S_surfxml_include_2: case S_surfxml_include_1: SET(S_surfxml_include_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of route element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `route' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `route' element.");
}

<S_surfxml_route,S_surfxml_route_2,E_surfxml_route>{
 "</route"{s}">" {
  LEAVE;
  ETag_surfxml_route();
  switch (YY_START) {
   case S_surfxml_platform_description_2: case S_surfxml_platform_description_1: case S_surfxml_platform_description: SET(S_surfxml_platform_description_2); break;
   case ROOT_surfxml_route: SET(EPILOG); break;
   case S_surfxml_include: case S_surfxml_include_2: case S_surfxml_include_1: SET(S_surfxml_include_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</route>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</route>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</route>' expected.");
}

<ROOT_surfxml_route_element,S_surfxml_route_1,S_surfxml_route,S_surfxml_route_2>"<route_element"{s} {
  A_surfxml_route_element_name = NULL;
  ENTER(AL_surfxml_route_element);
  }

<AL_surfxml_route_element>{
 "name"{Eq}\' ENTER(VALUE1); BUFFERSET(A_surfxml_route_element_name);
 "name"{Eq}\" ENTER(VALUE2); BUFFERSET(A_surfxml_route_element_name);

 ">" {
  if (!A_surfxml_route_element_name) FAIL("Required attribute `name' not set for `route_element' element.");
  LEAVE; STag_surfxml_route_element();surfxml_pcdata = NULL; ENTER(E_surfxml_route_element);
 }
 "/>" {
  if (!A_surfxml_route_element_name) FAIL("Required attribute `name' not set for `route_element' element.");
  LEAVE; STag_surfxml_route_element(); surfxml_pcdata = NULL; ETag_surfxml_route_element();
  switch (YY_START) {
   case S_surfxml_route_1: case S_surfxml_route: case S_surfxml_route_2: SET(S_surfxml_route_2); break;
   case ROOT_surfxml_route_element: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of route_element element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `route_element' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `route_element' element.");
}

<E_surfxml_route_element>{
 "</route_element"{s}">" {
  LEAVE;
  ETag_surfxml_route_element();
  switch (YY_START) {
   case S_surfxml_route_1: case S_surfxml_route: case S_surfxml_route_2: SET(S_surfxml_route_2); break;
   case ROOT_surfxml_route_element: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</route_element>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</route_element>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</route_element>' expected.");
}

<ROOT_surfxml_process,S_surfxml_platform_description_2,S_surfxml_include,S_surfxml_include_2,S_surfxml_platform_description_1,S_surfxml_include_1,S_surfxml_platform_description>"<process"{s} {
  A_surfxml_process_host = NULL;
  A_surfxml_process_function = NULL;
  A_surfxml_process_start_time = "-1.0";
  A_surfxml_process_kill_time = "-1.0";
  ENTER(AL_surfxml_process);
  }

<AL_surfxml_process>{
 "host"{Eq}\' ENTER(VALUE1); BUFFERSET(A_surfxml_process_host);
 "host"{Eq}\" ENTER(VALUE2); BUFFERSET(A_surfxml_process_host);

 "function"{Eq}\' ENTER(VALUE1); BUFFERSET(A_surfxml_process_function);
 "function"{Eq}\" ENTER(VALUE2); BUFFERSET(A_surfxml_process_function);

 "start_time"{Eq}\' ENTER(VALUE1); BUFFERSET(A_surfxml_process_start_time);
 "start_time"{Eq}\" ENTER(VALUE2); BUFFERSET(A_surfxml_process_start_time);

 "kill_time"{Eq}\' ENTER(VALUE1); BUFFERSET(A_surfxml_process_kill_time);
 "kill_time"{Eq}\" ENTER(VALUE2); BUFFERSET(A_surfxml_process_kill_time);

 ">" {
  if (!A_surfxml_process_host) FAIL("Required attribute `host' not set for `process' element.");
  if (!A_surfxml_process_function) FAIL("Required attribute `function' not set for `process' element.");
  LEAVE; STag_surfxml_process();surfxml_pcdata = NULL; ENTER(S_surfxml_process);
 }
 "/>" {
  if (!A_surfxml_process_host) FAIL("Required attribute `host' not set for `process' element.");
  if (!A_surfxml_process_function) FAIL("Required attribute `function' not set for `process' element.");
  LEAVE; STag_surfxml_process(); surfxml_pcdata = NULL; ETag_surfxml_process();
  switch (YY_START) {
   case S_surfxml_platform_description_2: case S_surfxml_platform_description_1: case S_surfxml_platform_description: SET(S_surfxml_platform_description_2); break;
   case ROOT_surfxml_process: SET(EPILOG); break;
   case S_surfxml_include: case S_surfxml_include_2: case S_surfxml_include_1: SET(S_surfxml_include_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of process element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `process' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `process' element.");
}

<S_surfxml_process,E_surfxml_process,S_surfxml_process_2>{
 "</process"{s}">" {
  LEAVE;
  ETag_surfxml_process();
  switch (YY_START) {
   case S_surfxml_platform_description_2: case S_surfxml_platform_description_1: case S_surfxml_platform_description: SET(S_surfxml_platform_description_2); break;
   case ROOT_surfxml_process: SET(EPILOG); break;
   case S_surfxml_include: case S_surfxml_include_2: case S_surfxml_include_1: SET(S_surfxml_include_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</process>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</process>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</process>' expected.");
}

<ROOT_surfxml_argument,S_surfxml_process_1,S_surfxml_process,S_surfxml_process_2>"<argument"{s} {
  A_surfxml_argument_value = NULL;
  ENTER(AL_surfxml_argument);
  }

<AL_surfxml_argument>{
 "value"{Eq}\' ENTER(VALUE1); BUFFERSET(A_surfxml_argument_value);
 "value"{Eq}\" ENTER(VALUE2); BUFFERSET(A_surfxml_argument_value);

 ">" {
  if (!A_surfxml_argument_value) FAIL("Required attribute `value' not set for `argument' element.");
  LEAVE; STag_surfxml_argument();surfxml_pcdata = NULL; ENTER(E_surfxml_argument);
 }
 "/>" {
  if (!A_surfxml_argument_value) FAIL("Required attribute `value' not set for `argument' element.");
  LEAVE; STag_surfxml_argument(); surfxml_pcdata = NULL; ETag_surfxml_argument();
  switch (YY_START) {
   case S_surfxml_process_1: case S_surfxml_process: case S_surfxml_process_2: SET(S_surfxml_process_2); break;
   case ROOT_surfxml_argument: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of argument element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `argument' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `argument' element.");
}

<E_surfxml_argument>{
 "</argument"{s}">" {
  LEAVE;
  ETag_surfxml_argument();
  switch (YY_START) {
   case S_surfxml_process_1: case S_surfxml_process: case S_surfxml_process_2: SET(S_surfxml_process_2); break;
   case ROOT_surfxml_argument: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</argument>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</argument>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</argument>' expected.");
}

 /* EPILOG: after the root element. */

<EPILOG>{
 . {SET(PROLOG); yyless(0); CLEANUP; return -1;}
 <<EOF>> 	SUCCEED;
}

 /* CHARACTER DATA. */

<IMPOSSIBLE,VALUE1,VALUE2>{
 /* Non-defined standard entities... */
"&amp;"  BUFFERPUTC('&');
"&lt;"   BUFFERPUTC('<');
"&gt;"   BUFFERPUTC('>');
"&apos;" BUFFERPUTC('\'');
"&quot;" BUFFERPUTC('"');

 /* Character entities. */
 "&#"[[:digit:]]+";"	BUFFERPUTC((unsigned char)atoi(yytext+2));
 "&#x"[[:xdigit:]]+";"	BUFFERPUTC((unsigned char)strtol(yytext+3,NULL,16));
}

<IMPOSSIBLE,VALUE1,VALUE2,CDATA>{
 "\n"		|
 "\r"		|
 "\r\n"		|
 "\n\r"		BUFFERPUTC('\n');
}

<IMPOSSIBLE>{
 "<![CDATA["	ENTER(CDATA);
 "]""]>"		FAIL("Unexpected `]""]>' in character data.");
}

<VALUE1>{
 \'		BUFFERDONE; LEAVE;
 <<EOF>>	FAIL("EOF in literal (\"'\" expected).");
}

<VALUE2>{
 \"		BUFFERDONE; LEAVE;
 <<EOF>>	FAIL("EOF in literal (`\"' expected).");
}

<IMPOSSIBLE,VALUE1,VALUE2>{
 [^<&]		BUFFERPUTC(yytext[0]);
 [<&]		FAIL("Spurious `%c' in character data.",yytext[0]);
}

<CDATA>{
 "]""]>"		LEAVE;
 /* "]""]"		BUFFERPUTC(yytext[0]); BUFFERPUTC(yytext[1]); */
 .		BUFFERPUTC(yytext[0]);
 <<EOF>>	FAIL("EOF in CDATA section.");
}

 /* Impossible rules to avoid warnings from flex(1). */
 /* Ideally, this should be replaced by code in flexml.pl that
    generates just the states not covered by other rules. */
<*>{
 .|[\n] FAIL("Syntax error on character `%c'.", yytext[0]);
}

%%

/* Element context stack lookup. */
int surfxml_element_context(int i)
{
  return (0<i && i<yy_start_stack_depth
	  ? yy_start_stack[yy_start_stack_ptr - i]
	  : 0);
}

#ifdef FLEX_DEBUG
void print_yy_stack(char* fmt, ...)
{
  int i = 0; va_list ap; va_start(ap, fmt);
  vfprintf(stderr, fmt, ap);
  for (i=1; i<yy_start_stack_ptr; i++)
    fprintf(stderr, "%s/", surfxml_statenames[yy_start_stack[i] ]);
  fprintf(stderr,"%s\n", surfxml_statenames[YY_START]);
  va_end(ap);
}

static void debug_enter(int state, const char* statename) {
  yy_push_state(state);
  if (yy_flex_debug) print_yy_stack("--ENTER(%s) : ",statename);
}

static void debug_leave(void) {
  if (yy_flex_debug) print_yy_stack("--LEAVE : ");
  yy_pop_state();
}

static void debug_set(int state, const char* statename) {
  BEGIN(state);
  if (yy_flex_debug) print_yy_stack("--SET(%s) : ",statename);
}
#endif

enum {flexml_max_err_msg_size = 512};

static char flexml_err_msg[flexml_max_err_msg_size];
const char * surfxml_parse_err_msg()
{
    return flexml_err_msg;
}

static void reset_surfxml_parse_err_msg()
{
    flexml_err_msg[0] = '\0';
}


static void cleanup(void)
{
    if (surfxml_statenames) {
        free(surfxml_statenames);
	surfxml_statenames = NULL;
    }
}


static int fail(const char* fmt, ...)
{
    int chars_left, used;
    va_list ap; va_start(ap, fmt);
#ifdef FLEXML_yylineno
    used = sprintf(flexml_err_msg,
		   "Invalid XML (XML input line %d, state %d): ",
		   yylineno, YY_START);
#else
    used = sprintf(flexml_err_msg,
		   "Invalid XML (state %d): ",
		   YY_START);
#endif
    chars_left = flexml_max_err_msg_size - used - 1;
    vsnprintf(flexml_err_msg + used, chars_left, fmt, ap);
    va_end(ap);

#ifndef FLEXML_quiet_parser
    /* print directly to sdterr */
    fprintf(stderr, "%s\n", flexml_err_msg);
    flexml_err_msg[0] = '\0';
#endif

    cleanup();

    return 1;
}
